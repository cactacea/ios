//
// Account.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Account: Codable {

    public var id: Int64
    public var accountName: String
    public var displayName: String?
    public var profileImageUrl: String?
    public var friend: Bool
    public var friendRequestInProgress: Bool
    public var follow: Bool
    public var follower: Bool
    public var followCount: Int64?
    public var followerCount: Int64?
    public var friendCount: Int64?
    public var feedsCount: Int64?
    public var mute: Bool
    public var web: String?
    public var birthday: Int64?
    public var location: String?
    public var bio: String?
    public var joinedAt: Int64?
    public var next: Int64


    
    public init(id: Int64, accountName: String, displayName: String?, profileImageUrl: String?, friend: Bool, friendRequestInProgress: Bool, follow: Bool, follower: Bool, followCount: Int64?, followerCount: Int64?, friendCount: Int64?, feedsCount: Int64?, mute: Bool, web: String?, birthday: Int64?, location: String?, bio: String?, joinedAt: Int64?, next: Int64) {
        self.id = id
        self.accountName = accountName
        self.displayName = displayName
        self.profileImageUrl = profileImageUrl
        self.friend = friend
        self.friendRequestInProgress = friendRequestInProgress
        self.follow = follow
        self.follower = follower
        self.followCount = followCount
        self.followerCount = followerCount
        self.friendCount = friendCount
        self.feedsCount = feedsCount
        self.mute = mute
        self.web = web
        self.birthday = birthday
        self.location = location
        self.bio = bio
        self.joinedAt = joinedAt
        self.next = next
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(id, forKey: "id")
        try container.encode(accountName, forKey: "accountName")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(profileImageUrl, forKey: "profileImageUrl")
        try container.encode(friend, forKey: "friend")
        try container.encode(friendRequestInProgress, forKey: "friendRequestInProgress")
        try container.encode(follow, forKey: "follow")
        try container.encode(follower, forKey: "follower")
        try container.encodeIfPresent(followCount, forKey: "followCount")
        try container.encodeIfPresent(followerCount, forKey: "followerCount")
        try container.encodeIfPresent(friendCount, forKey: "friendCount")
        try container.encodeIfPresent(feedsCount, forKey: "feedsCount")
        try container.encode(mute, forKey: "mute")
        try container.encodeIfPresent(web, forKey: "web")
        try container.encodeIfPresent(birthday, forKey: "birthday")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(bio, forKey: "bio")
        try container.encodeIfPresent(joinedAt, forKey: "joinedAt")
        try container.encode(next, forKey: "next")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decode(Int64.self, forKey: "id")
        accountName = try container.decode(String.self, forKey: "accountName")
        displayName = try container.decodeIfPresent(String.self, forKey: "displayName")
        profileImageUrl = try container.decodeIfPresent(String.self, forKey: "profileImageUrl")
        friend = try container.decode(Bool.self, forKey: "friend")
        friendRequestInProgress = try container.decode(Bool.self, forKey: "friendRequestInProgress")
        follow = try container.decode(Bool.self, forKey: "follow")
        follower = try container.decode(Bool.self, forKey: "follower")
        followCount = try container.decodeIfPresent(Int64.self, forKey: "followCount")
        followerCount = try container.decodeIfPresent(Int64.self, forKey: "followerCount")
        friendCount = try container.decodeIfPresent(Int64.self, forKey: "friendCount")
        feedsCount = try container.decodeIfPresent(Int64.self, forKey: "feedsCount")
        mute = try container.decode(Bool.self, forKey: "mute")
        web = try container.decodeIfPresent(String.self, forKey: "web")
        birthday = try container.decodeIfPresent(Int64.self, forKey: "birthday")
        location = try container.decodeIfPresent(String.self, forKey: "location")
        bio = try container.decodeIfPresent(String.self, forKey: "bio")
        joinedAt = try container.decodeIfPresent(Int64.self, forKey: "joinedAt")
        next = try container.decode(Int64.self, forKey: "next")
    }
}

