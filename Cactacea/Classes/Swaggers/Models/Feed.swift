//
// Feed.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Feed: Codable {

    public var id: Int64
    public var message: String
    public var mediums: [Medium]
    public var tags: [String]?
    public var user: User?
    public var likeCount: Int64
    public var commentCount: Int64
    public var liked: Bool
    public var warning: Bool
    public var rejected: Bool
    public var postedAt: Int64
    public var next: Int64


    
    public init(id: Int64, message: String, mediums: [Medium], tags: [String]?, user: User?, likeCount: Int64, commentCount: Int64, liked: Bool, warning: Bool, rejected: Bool, postedAt: Int64, next: Int64) {
        self.id = id
        self.message = message
        self.mediums = mediums
        self.tags = tags
        self.user = user
        self.likeCount = likeCount
        self.commentCount = commentCount
        self.liked = liked
        self.warning = warning
        self.rejected = rejected
        self.postedAt = postedAt
        self.next = next
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(id, forKey: "id")
        try container.encode(message, forKey: "message")
        try container.encode(mediums, forKey: "mediums")
        try container.encodeIfPresent(tags, forKey: "tags")
        try container.encodeIfPresent(user, forKey: "user")
        try container.encode(likeCount, forKey: "likeCount")
        try container.encode(commentCount, forKey: "commentCount")
        try container.encode(liked, forKey: "liked")
        try container.encode(warning, forKey: "warning")
        try container.encode(rejected, forKey: "rejected")
        try container.encode(postedAt, forKey: "postedAt")
        try container.encode(next, forKey: "next")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decode(Int64.self, forKey: "id")
        message = try container.decode(String.self, forKey: "message")
        mediums = try container.decode([Medium].self, forKey: "mediums")
        tags = try container.decodeIfPresent([String].self, forKey: "tags")
        user = try container.decodeIfPresent(User.self, forKey: "user")
        likeCount = try container.decode(Int64.self, forKey: "likeCount")
        commentCount = try container.decode(Int64.self, forKey: "commentCount")
        liked = try container.decode(Bool.self, forKey: "liked")
        warning = try container.decode(Bool.self, forKey: "warning")
        rejected = try container.decode(Bool.self, forKey: "rejected")
        postedAt = try container.decode(Int64.self, forKey: "postedAt")
        next = try container.decode(Int64.self, forKey: "next")
    }
}

