//
// PutTweetBody.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class PutTweetBody: Codable {

    public enum PrivacyType: String, Codable { 
        case everyone = "everyone"
        case followers = "followers"
        case friends = "friends"
        case _self = "self"
    }
    /** A tweet message will be posted. */
    public var message: String
    /** Medium identifiers of attached. */
    public var mediumIds: [Int64]?
    /** Tags of tweet. */
    public var tags: [String]?
    /** Channel privacy type. */
    public var privacyType: PrivacyType
    /** Content warning. */
    public var contentWarning: Bool
    /** Expiration of a tweet. */
    public var expiration: Int64?


    
    public init(message: String, mediumIds: [Int64]?, tags: [String]?, privacyType: PrivacyType, contentWarning: Bool, expiration: Int64?) {
        self.message = message
        self.mediumIds = mediumIds
        self.tags = tags
        self.privacyType = privacyType
        self.contentWarning = contentWarning
        self.expiration = expiration
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(message, forKey: "message")
        try container.encodeIfPresent(mediumIds, forKey: "mediumIds")
        try container.encodeIfPresent(tags, forKey: "tags")
        try container.encode(privacyType, forKey: "privacyType")
        try container.encode(contentWarning, forKey: "contentWarning")
        try container.encodeIfPresent(expiration, forKey: "expiration")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        message = try container.decode(String.self, forKey: "message")
        mediumIds = try container.decodeIfPresent([Int64].self, forKey: "mediumIds")
        tags = try container.decodeIfPresent([String].self, forKey: "tags")
        privacyType = try container.decode(PrivacyType.self, forKey: "privacyType")
        contentWarning = try container.decode(Bool.self, forKey: "contentWarning")
        expiration = try container.decodeIfPresent(Int64.self, forKey: "expiration")
    }
}

