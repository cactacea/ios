//
// User.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class User: Codable {

    public enum UserStatus: String, Codable { 
        case normally = "normally"
        case deleted = "deleted"
        case terminated = "terminated"
    }
    public var id: Int64
    public var userName: String
    public var displayName: String
    public var profileImageUrl: String?
    public var isFriend: Bool
    public var friendRequestInProgress: Bool
    public var follow: Bool
    public var isFollower: Bool
    public var followCount: Int64
    public var followerCount: Int64
    public var friendCount: Int64
    public var feedCount: Int64
    public var muted: Bool
    public var blocked: Bool
    public var web: String?
    public var birthday: Int64?
    public var location: String?
    public var bio: String?
    public var joinedAt: Int64?
    public var userStatus: UserStatus
    public var signedOutAt: Int64?
    public var next: Int64


    
    public init(id: Int64, userName: String, displayName: String, profileImageUrl: String?, isFriend: Bool, friendRequestInProgress: Bool, follow: Bool, isFollower: Bool, followCount: Int64, followerCount: Int64, friendCount: Int64, feedCount: Int64, muted: Bool, blocked: Bool, web: String?, birthday: Int64?, location: String?, bio: String?, joinedAt: Int64?, userStatus: UserStatus, signedOutAt: Int64?, next: Int64) {
        self.id = id
        self.userName = userName
        self.displayName = displayName
        self.profileImageUrl = profileImageUrl
        self.isFriend = isFriend
        self.friendRequestInProgress = friendRequestInProgress
        self.follow = follow
        self.isFollower = isFollower
        self.followCount = followCount
        self.followerCount = followerCount
        self.friendCount = friendCount
        self.feedCount = feedCount
        self.muted = muted
        self.blocked = blocked
        self.web = web
        self.birthday = birthday
        self.location = location
        self.bio = bio
        self.joinedAt = joinedAt
        self.userStatus = userStatus
        self.signedOutAt = signedOutAt
        self.next = next
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(id, forKey: "id")
        try container.encode(userName, forKey: "userName")
        try container.encode(displayName, forKey: "displayName")
        try container.encodeIfPresent(profileImageUrl, forKey: "profileImageUrl")
        try container.encode(isFriend, forKey: "isFriend")
        try container.encode(friendRequestInProgress, forKey: "friendRequestInProgress")
        try container.encode(follow, forKey: "follow")
        try container.encode(isFollower, forKey: "isFollower")
        try container.encode(followCount, forKey: "followCount")
        try container.encode(followerCount, forKey: "followerCount")
        try container.encode(friendCount, forKey: "friendCount")
        try container.encode(feedCount, forKey: "feedCount")
        try container.encode(muted, forKey: "muted")
        try container.encode(blocked, forKey: "blocked")
        try container.encodeIfPresent(web, forKey: "web")
        try container.encodeIfPresent(birthday, forKey: "birthday")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(bio, forKey: "bio")
        try container.encodeIfPresent(joinedAt, forKey: "joinedAt")
        try container.encode(userStatus, forKey: "userStatus")
        try container.encodeIfPresent(signedOutAt, forKey: "signedOutAt")
        try container.encode(next, forKey: "next")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decode(Int64.self, forKey: "id")
        userName = try container.decode(String.self, forKey: "userName")
        displayName = try container.decode(String.self, forKey: "displayName")
        profileImageUrl = try container.decodeIfPresent(String.self, forKey: "profileImageUrl")
        isFriend = try container.decode(Bool.self, forKey: "isFriend")
        friendRequestInProgress = try container.decode(Bool.self, forKey: "friendRequestInProgress")
        follow = try container.decode(Bool.self, forKey: "follow")
        isFollower = try container.decode(Bool.self, forKey: "isFollower")
        followCount = try container.decode(Int64.self, forKey: "followCount")
        followerCount = try container.decode(Int64.self, forKey: "followerCount")
        friendCount = try container.decode(Int64.self, forKey: "friendCount")
        feedCount = try container.decode(Int64.self, forKey: "feedCount")
        muted = try container.decode(Bool.self, forKey: "muted")
        blocked = try container.decode(Bool.self, forKey: "blocked")
        web = try container.decodeIfPresent(String.self, forKey: "web")
        birthday = try container.decodeIfPresent(Int64.self, forKey: "birthday")
        location = try container.decodeIfPresent(String.self, forKey: "location")
        bio = try container.decodeIfPresent(String.self, forKey: "bio")
        joinedAt = try container.decodeIfPresent(Int64.self, forKey: "joinedAt")
        userStatus = try container.decode(UserStatus.self, forKey: "userStatus")
        signedOutAt = try container.decodeIfPresent(Int64.self, forKey: "signedOutAt")
        next = try container.decode(Int64.self, forKey: "next")
    }
}

