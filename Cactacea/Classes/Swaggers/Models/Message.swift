//
// Message.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Message: Codable {

    public enum MessageType: String, Codable { 
        case text = "text"
        case medium = "medium"
        case stamp = "stamp"
        case invited = "invited"
        case joined = "joined"
        case _left = "left"
    }
    public var id: Int64
    public var channelId: Int64
    public var messageType: MessageType
    public var message: String?
    public var medium: Medium?
    public var user: User
    public var unread: Bool
    public var userCount: Int64
    public var readUserCount: Int64
    public var warning: Bool
    public var rejected: Bool
    public var postedAt: Int64
    public var next: Int64


    
    public init(id: Int64, channelId: Int64, messageType: MessageType, message: String?, medium: Medium?, user: User, unread: Bool, userCount: Int64, readUserCount: Int64, warning: Bool, rejected: Bool, postedAt: Int64, next: Int64) {
        self.id = id
        self.channelId = channelId
        self.messageType = messageType
        self.message = message
        self.medium = medium
        self.user = user
        self.unread = unread
        self.userCount = userCount
        self.readUserCount = readUserCount
        self.warning = warning
        self.rejected = rejected
        self.postedAt = postedAt
        self.next = next
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(id, forKey: "id")
        try container.encode(channelId, forKey: "channelId")
        try container.encode(messageType, forKey: "messageType")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(medium, forKey: "medium")
        try container.encode(user, forKey: "user")
        try container.encode(unread, forKey: "unread")
        try container.encode(userCount, forKey: "userCount")
        try container.encode(readUserCount, forKey: "readUserCount")
        try container.encode(warning, forKey: "warning")
        try container.encode(rejected, forKey: "rejected")
        try container.encode(postedAt, forKey: "postedAt")
        try container.encode(next, forKey: "next")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decode(Int64.self, forKey: "id")
        channelId = try container.decode(Int64.self, forKey: "channelId")
        messageType = try container.decode(MessageType.self, forKey: "messageType")
        message = try container.decodeIfPresent(String.self, forKey: "message")
        medium = try container.decodeIfPresent(Medium.self, forKey: "medium")
        user = try container.decode(User.self, forKey: "user")
        unread = try container.decode(Bool.self, forKey: "unread")
        userCount = try container.decode(Int64.self, forKey: "userCount")
        readUserCount = try container.decode(Int64.self, forKey: "readUserCount")
        warning = try container.decode(Bool.self, forKey: "warning")
        rejected = try container.decode(Bool.self, forKey: "rejected")
        postedAt = try container.decode(Int64.self, forKey: "postedAt")
        next = try container.decode(Int64.self, forKey: "next")
    }
}

