//
// ChannelsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class ChannelsAPI {
    /**
     Create a channel
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createChannel(body: PostChannelBody, completion: @escaping ((_ data: ChannelCreated?,_ error: Error?) -> Void)) {
        createChannelWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a channel
     
     - parameter body: (body)  
     - returns: Observable<ChannelCreated>
     */
    open class func createChannel(body: PostChannelBody) -> Observable<ChannelCreated> {
        return Observable.create { observer -> Disposable in
            createChannel(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a channel
     - POST /channels
     - examples: [{contentType=application/json, example={
  "id" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<ChannelCreated> 
     */
    open class func createChannelWithRequestBuilder(body: PostChannelBody) -> RequestBuilder<ChannelCreated> {
        let path = "/channels"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ChannelCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Hide a channel and delete all messages
     
     - parameter id: (path) Channel identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteChannel(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteChannelWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Hide a channel and delete all messages
     
     - parameter id: (path) Channel identifier. 
     - returns: Observable<Void>
     */
    open class func deleteChannel(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteChannel(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Hide a channel and delete all messages
     - DELETE /channels/{id}
     
     - parameter id: (path) Channel identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteChannelWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/channels/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get basic information about a channel
     
     - parameter id: (path) Channel identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findChannel(id: Int64, completion: @escaping ((_ data: Channel?,_ error: Error?) -> Void)) {
        findChannelWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get basic information about a channel
     
     - parameter id: (path) Channel identifier. 
     - returns: Observable<Channel>
     */
    open class func findChannel(id: Int64) -> Observable<Channel> {
        return Observable.create { observer -> Disposable in
            findChannel(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get basic information about a channel
     - GET /channels/{id}
     - examples: [{contentType=application/json, example={
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "tweetCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
}}]
     
     - parameter id: (path) Channel identifier. 

     - returns: RequestBuilder<Channel> 
     */
    open class func findChannelWithRequestBuilder(id: Int64) -> RequestBuilder<Channel> {
        var path = "/channels/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Channel>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get users list of a channel
     
     - parameter id: (path) Channel identifier. 
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findChannelUsers(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Channel]?,_ error: Error?) -> Void)) {
        findChannelUsersWithRequestBuilder(id: id, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get users list of a channel
     
     - parameter id: (path) Channel identifier. 
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Channel]>
     */
    open class func findChannelUsers(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Channel]> {
        return Observable.create { observer -> Disposable in
            findChannelUsers(id: id, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get users list of a channel
     - GET /channels/{id}/users
     - examples: [{contentType=application/json, example=[ {
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "tweetCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
}, {
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "tweetCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
} ]}]
     
     - parameter id: (path) Channel identifier. 
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Channel]> 
     */
    open class func findChannelUsersWithRequestBuilder(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Channel]> {
        var path = "/channels/{id}/users"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Channel]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Hide a channel
     
     - parameter id: (path) Channel identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func hideChannel(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        hideChannelWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Hide a channel
     
     - parameter id: (path) Channel identifier. 
     - returns: Observable<Void>
     */
    open class func hideChannel(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            hideChannel(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Hide a channel
     - POST /channels/{id}/hides
     
     - parameter id: (path) Channel identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func hideChannelWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/channels/{id}/hides"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Join to a channel,
     
     - parameter id: (path) Channel identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func joinChannel(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        joinChannelWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Join to a channel,
     
     - parameter id: (path) Channel identifier. 
     - returns: Observable<Void>
     */
    open class func joinChannel(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            joinChannel(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Join to a channel,
     - POST /channels/{id}/join
     
     - parameter id: (path) Channel identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func joinChannelWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/channels/{id}/join"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Leave from a channel
     
     - parameter id: (path) Invitation identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func leaveChannel(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        leaveChannelWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Leave from a channel
     
     - parameter id: (path) Invitation identifier. 
     - returns: Observable<Void>
     */
    open class func leaveChannel(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            leaveChannel(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Leave from a channel
     - POST /channels/{id}/leave
     
     - parameter id: (path) Invitation identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func leaveChannelWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/channels/{id}/leave"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Report a channel
     
     - parameter id: (path) Channel identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportChannel(id: Int64, body: PostChannelReportBody, completion: @escaping ((_ error: Error?) -> Void)) {
        reportChannelWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Report a channel
     
     - parameter id: (path) Channel identifier. 
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func reportChannel(id: Int64, body: PostChannelReportBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            reportChannel(id: id, body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Report a channel
     - POST /channels/{id}/reports
     
     - parameter id: (path) Channel identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func reportChannelWithRequestBuilder(id: Int64, body: PostChannelReportBody) -> RequestBuilder<Void> {
        var path = "/channels/{id}/reports"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Show a channel
     
     - parameter id: (path) Channel identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func showChannel(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        showChannelWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Show a channel
     
     - parameter id: (path) Channel identifier. 
     - returns: Observable<Void>
     */
    open class func showChannel(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            showChannel(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Show a channel
     - DELETE /channels/{id}/hides
     
     - parameter id: (path) Channel identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func showChannelWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/channels/{id}/hides"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a channel
     
     - parameter id: (path) Channel identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateChannel(id: Int64, body: PutChannelBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateChannelWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update a channel
     
     - parameter id: (path) Channel identifier. 
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateChannel(id: Int64, body: PutChannelBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateChannel(id: id, body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update a channel
     - PUT /channels/{id}
     
     - parameter id: (path) Channel identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateChannelWithRequestBuilder(id: Int64, body: PutChannelBody) -> RequestBuilder<Void> {
        var path = "/channels/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
