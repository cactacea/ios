//
// InvitationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class InvitationsAPI {
    /**
     Accept a invitation
     
     - parameter id: (path) Group invitation identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func acceptGroupInvitation(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        acceptGroupInvitationWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Accept a invitation
     
     - parameter id: (path) Group invitation identifier. 
     - returns: Observable<Void>
     */
    open class func acceptGroupInvitation(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            acceptGroupInvitation(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Accept a invitation
     - POST /invitations/{id}/accept
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group invitation identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func acceptGroupInvitationWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/invitations/{id}/accept"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a invitation to a account
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroupInvitationToAccount(accountId: Int64, groupId: Int64, completion: @escaping ((_ data: InvitationCreated?,_ error: Error?) -> Void)) {
        createGroupInvitationToAccountWithRequestBuilder(accountId: accountId, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a invitation to a account
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - returns: Observable<InvitationCreated>
     */
    open class func createGroupInvitationToAccount(accountId: Int64, groupId: Int64) -> Observable<InvitationCreated> {
        return Observable.create { observer -> Disposable in
            createGroupInvitationToAccount(accountId: accountId, groupId: groupId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a invitation to a account
     - POST /accounts/{account_id}/groups/{group_id}/invitations
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "id" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 

     - returns: RequestBuilder<InvitationCreated> 
     */
    open class func createGroupInvitationToAccountWithRequestBuilder(accountId: Int64, groupId: Int64) -> RequestBuilder<InvitationCreated> {
        var path = "/accounts/{account_id}/groups/{group_id}/invitations"
        path = path.replacingOccurrences(of: "{account_id}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{group_id}", with: "\(groupId)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InvitationCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Post a invitation to some accounts
     
     - parameter id: (path) Group Identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroupInvitationToAccounts(id: Int64, body: PostInvitationAccountsBody, completion: @escaping ((_ data: InvitationCreated?,_ error: Error?) -> Void)) {
        createGroupInvitationToAccountsWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Post a invitation to some accounts
     
     - parameter id: (path) Group Identifier. 
     - parameter body: (body)  
     - returns: Observable<InvitationCreated>
     */
    open class func createGroupInvitationToAccounts(id: Int64, body: PostInvitationAccountsBody) -> Observable<InvitationCreated> {
        return Observable.create { observer -> Disposable in
            createGroupInvitationToAccounts(id: id, body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Post a invitation to some accounts
     - POST /groups/{id}/invitations
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "id" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter id: (path) Group Identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<InvitationCreated> 
     */
    open class func createGroupInvitationToAccountsWithRequestBuilder(id: Int64, body: PostInvitationAccountsBody) -> RequestBuilder<InvitationCreated> {
        var path = "/groups/{id}/invitations"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InvitationCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get invitations list session account received
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of group invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionGroupInvitations(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [GroupInvitation]?,_ error: Error?) -> Void)) {
        findSessionGroupInvitationsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get invitations list session account received
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of group invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[GroupInvitation]>
     */
    open class func findSessionGroupInvitations(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[GroupInvitation]> {
        return Observable.create { observer -> Disposable in
            findSessionGroupInvitations(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get invitations list session account received
     - GET /session/invitations
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "by" : {
    "birthday" : 5.63737665663332876420099637471139430999755859375,
    "next" : 7,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "id" : 0.80082819046101150206595775671303272247314453125,
  "invitationStatus" : "noResponded",
  "group" : {
    "next" : 9,
    "groupPrivacyType" : "everyone",
    "accountCount" : 2,
    "name" : "name",
    "invitationOnly" : true,
    "id" : 0.80082819046101150206595775671303272247314453125,
    "message" : {
      "contentWarning" : true,
      "readAccountCount" : 5,
      "accountCount" : 1,
      "messageType" : "text",
      "postedAt" : 5,
      "unread" : true,
      "by" : {
        "birthday" : 5.63737665663332876420099637471139430999755859375,
        "next" : 7,
        "follower" : true,
        "followCount" : 6.02745618307040320615897144307382404804229736328125,
        "friendCount" : 5.962133916683182377482808078639209270477294921875,
        "accountName" : "accountName",
        "displayName" : "displayName",
        "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
        "bio" : "bio",
        "mute" : true,
        "follow" : true,
        "friendRequestInProgress" : true,
        "web" : "web",
        "friend" : true,
        "location" : "location",
        "id" : 0.80082819046101150206595775671303272247314453125,
        "profileImageUrl" : "profileImageUrl",
        "followerCount" : 1.46581298050294517310021547018550336360931396484375
      },
      "contentDeleted" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "medium" : {
        "contentWarning" : true,
        "size" : 5,
        "contentDeleted" : true,
        "width" : 1,
        "mediumType" : "image",
        "id" : 6.02745618307040320615897144307382404804229736328125,
        "uri" : "uri",
        "height" : 5,
        "thumbnailUrl" : "thumbnailUrl"
      },
      "message" : "message",
      "account" : {
        "birthday" : 5.63737665663332876420099637471139430999755859375,
        "next" : 7,
        "follower" : true,
        "followCount" : 6.02745618307040320615897144307382404804229736328125,
        "friendCount" : 5.962133916683182377482808078639209270477294921875,
        "accountName" : "accountName",
        "displayName" : "displayName",
        "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
        "bio" : "bio",
        "mute" : true,
        "follow" : true,
        "friendRequestInProgress" : true,
        "web" : "web",
        "friend" : true,
        "location" : "location",
        "id" : 0.80082819046101150206595775671303272247314453125,
        "profileImageUrl" : "profileImageUrl",
        "followerCount" : 1.46581298050294517310021547018550336360931396484375
      }
    },
    "authorityType" : "owner",
    "organizedAt" : 7
  },
  "invitedAt" : 6
}, {
  "by" : {
    "birthday" : 5.63737665663332876420099637471139430999755859375,
    "next" : 7,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "id" : 0.80082819046101150206595775671303272247314453125,
  "invitationStatus" : "noResponded",
  "group" : {
    "next" : 9,
    "groupPrivacyType" : "everyone",
    "accountCount" : 2,
    "name" : "name",
    "invitationOnly" : true,
    "id" : 0.80082819046101150206595775671303272247314453125,
    "message" : {
      "contentWarning" : true,
      "readAccountCount" : 5,
      "accountCount" : 1,
      "messageType" : "text",
      "postedAt" : 5,
      "unread" : true,
      "by" : {
        "birthday" : 5.63737665663332876420099637471139430999755859375,
        "next" : 7,
        "follower" : true,
        "followCount" : 6.02745618307040320615897144307382404804229736328125,
        "friendCount" : 5.962133916683182377482808078639209270477294921875,
        "accountName" : "accountName",
        "displayName" : "displayName",
        "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
        "bio" : "bio",
        "mute" : true,
        "follow" : true,
        "friendRequestInProgress" : true,
        "web" : "web",
        "friend" : true,
        "location" : "location",
        "id" : 0.80082819046101150206595775671303272247314453125,
        "profileImageUrl" : "profileImageUrl",
        "followerCount" : 1.46581298050294517310021547018550336360931396484375
      },
      "contentDeleted" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "medium" : {
        "contentWarning" : true,
        "size" : 5,
        "contentDeleted" : true,
        "width" : 1,
        "mediumType" : "image",
        "id" : 6.02745618307040320615897144307382404804229736328125,
        "uri" : "uri",
        "height" : 5,
        "thumbnailUrl" : "thumbnailUrl"
      },
      "message" : "message",
      "account" : {
        "birthday" : 5.63737665663332876420099637471139430999755859375,
        "next" : 7,
        "follower" : true,
        "followCount" : 6.02745618307040320615897144307382404804229736328125,
        "friendCount" : 5.962133916683182377482808078639209270477294921875,
        "accountName" : "accountName",
        "displayName" : "displayName",
        "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
        "bio" : "bio",
        "mute" : true,
        "follow" : true,
        "friendRequestInProgress" : true,
        "web" : "web",
        "friend" : true,
        "location" : "location",
        "id" : 0.80082819046101150206595775671303272247314453125,
        "profileImageUrl" : "profileImageUrl",
        "followerCount" : 1.46581298050294517310021547018550336360931396484375
      }
    },
    "authorityType" : "owner",
    "organizedAt" : 7
  },
  "invitedAt" : 6
} ]}]
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of group invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[GroupInvitation]> 
     */
    open class func findSessionGroupInvitationsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[GroupInvitation]> {
        let path = "/session/invitations"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[GroupInvitation]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reject a invitation
     
     - parameter id: (path) Group invitation identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rejectGroupInvitation(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        rejectGroupInvitationWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Reject a invitation
     
     - parameter id: (path) Group invitation identifier. 
     - returns: Observable<Void>
     */
    open class func rejectGroupInvitation(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            rejectGroupInvitation(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Reject a invitation
     - POST /invitations/{id}/reject
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group invitation identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func rejectGroupInvitationWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/invitations/{id}/reject"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
