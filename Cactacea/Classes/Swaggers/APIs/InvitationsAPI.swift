//
// InvitationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class InvitationsAPI {
    /**
     Accept a groupInvitation
     
     - parameter id: (path) Group groupInvitation identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func acceptInvitation(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        acceptInvitationWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Accept a groupInvitation
     
     - parameter id: (path) Group groupInvitation identifier. 
     - returns: Observable<Void>
     */
    open class func acceptInvitation(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            acceptInvitation(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Accept a groupInvitation
     - POST /invitations/{id}/accept
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group groupInvitation identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func acceptInvitationWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/invitations/{id}/accept"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Post a groupInvitation to some accounts
     
     - parameter id: (path) Group Identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func inviteAccounts(id: Int64, body: PostInvitationAccountsBody, completion: @escaping ((_ data: InvitationCreated?,_ error: Error?) -> Void)) {
        inviteAccountsWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Post a groupInvitation to some accounts
     
     - parameter id: (path) Group Identifier. 
     - parameter body: (body)  
     - returns: Observable<InvitationCreated>
     */
    open class func inviteAccounts(id: Int64, body: PostInvitationAccountsBody) -> Observable<InvitationCreated> {
        return Observable.create { observer -> Disposable in
            inviteAccounts(id: id, body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Post a groupInvitation to some accounts
     - POST /groups/{id}/invitations
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "id" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter id: (path) Group Identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<InvitationCreated> 
     */
    open class func inviteAccountsWithRequestBuilder(id: Int64, body: PostInvitationAccountsBody) -> RequestBuilder<InvitationCreated> {
        var path = "/groups/{id}/invitations"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InvitationCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reject a groupInvitation
     
     - parameter id: (path) Group groupInvitation identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rejectInvitation(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        rejectInvitationWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Reject a groupInvitation
     
     - parameter id: (path) Group groupInvitation identifier. 
     - returns: Observable<Void>
     */
    open class func rejectInvitation(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            rejectInvitation(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Reject a groupInvitation
     - POST /invitations/{id}/reject
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group groupInvitation identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func rejectInvitationWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/invitations/{id}/reject"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
