//
// SessionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class SessionAPI {
    /**
     Remove the profile image
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteSessionProfileImage(completion: @escaping ((_ error: Error?) -> Void)) {
        deleteSessionProfileImageWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Remove the profile image
     
     - returns: Observable<Void>
     */
    open class func deleteSessionProfileImage() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteSessionProfileImage() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Remove the profile image
     - DELETE /session/profile_image
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteSessionProfileImageWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/session/profile_image"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get basic information about session account
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSession(completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        findSessionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get basic information about session account
     
     - returns: Observable<Account>
     */
    open class func findSession() -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            findSession() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get basic information about session account
     - GET /session
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}}]

     - returns: RequestBuilder<Account> 
     */
    open class func findSessionWithRequestBuilder() -> RequestBuilder<Account> {
        let path = "/session"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Account>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get feeds list session account posted
     
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionFeeds(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: Feed?,_ error: Error?) -> Void)) {
        findSessionFeedsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get feeds list session account posted
     
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<Feed>
     */
    open class func findSessionFeeds(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<Feed> {
        return Observable.create { observer -> Disposable in
            findSessionFeeds(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get feeds list session account posted
     - GET /session/feeds
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "contentWarning" : true,
  "likedAt" : 3.61607674925191080461672754609026014804840087890625,
  "postedAt" : 9,
  "contentDeleted" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
}}]
     
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<Feed> 
     */
    open class func findSessionFeedsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<Feed> {
        let path = "/session/feeds"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<Feed>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get accounts list session account is followed by
     
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionFollowers(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        findSessionFollowersWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get accounts list session account is followed by
     
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Account]>
     */
    open class func findSessionFollowers(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Account]> {
        return Observable.create { observer -> Disposable in
            findSessionFollowers(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get accounts list session account is followed by
     - GET /session/followers
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
} ]}]
     
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Account]> 
     */
    open class func findSessionFollowersWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Account]> {
        let path = "/session/followers"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Account]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get accounts list session account followed
     
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionFollows(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        findSessionFollowsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get accounts list session account followed
     
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Account]>
     */
    open class func findSessionFollows(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Account]> {
        return Observable.create { observer -> Disposable in
            findSessionFollows(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get accounts list session account followed
     - GET /session/follows
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
} ]}]
     
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Account]> 
     */
    open class func findSessionFollowsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Account]> {
        let path = "/session/follows"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Account]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sortType
     */
    public enum SortType_findSessionFriends: String { 
        case friendsat = "friendsAt"
        case accountname = "accountName"
    }

    /**
     Get friends list
     
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter sortType: (query) Friends which sorted by accountName or friendsAt. Default is friendsAt. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionFriends(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, sortType: SortType_findSessionFriends? = nil, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        findSessionFriendsWithRequestBuilder(since: since, offset: offset, count: count, sortType: sortType).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get friends list
     
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter sortType: (query) Friends which sorted by accountName or friendsAt. Default is friendsAt. (optional)
     - returns: Observable<[Account]>
     */
    open class func findSessionFriends(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, sortType: SortType_findSessionFriends? = nil) -> Observable<[Account]> {
        return Observable.create { observer -> Disposable in
            findSessionFriends(since: since, offset: offset, count: count, sortType: sortType) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get friends list
     - GET /session/friends
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
} ]}]
     
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter sortType: (query) Friends which sorted by accountName or friendsAt. Default is friendsAt. (optional)

     - returns: RequestBuilder<[Account]> 
     */
    open class func findSessionFriendsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, sortType: SortType_findSessionFriends? = nil) -> RequestBuilder<[Account]> {
        let path = "/session/friends"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count, 
            "sortType": sortType?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[Account]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get feeds list session account set a like
     
     - parameter since: (query) Filters entries which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionLikes(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: Feed?,_ error: Error?) -> Void)) {
        findSessionLikesWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get feeds list session account set a like
     
     - parameter since: (query) Filters entries which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<Feed>
     */
    open class func findSessionLikes(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<Feed> {
        return Observable.create { observer -> Disposable in
            findSessionLikes(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get feeds list session account set a like
     - GET /session/likes
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "contentWarning" : true,
  "likedAt" : 3.61607674925191080461672754609026014804840087890625,
  "postedAt" : 9,
  "contentDeleted" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
}}]
     
     - parameter since: (query) Filters entries which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<Feed> 
     */
    open class func findSessionLikesWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<Feed> {
        let path = "/session/likes"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<Feed>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sign out
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signOut(completion: @escaping ((_ error: Error?) -> Void)) {
        signOutWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Sign out
     
     - returns: Observable<Void>
     */
    open class func signOut() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            signOut() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign out
     - DELETE /session
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth

     - returns: RequestBuilder<Void> 
     */
    open class func signOutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/session"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the account name
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSessionAccountName(body: PutSessionAccountNameBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateSessionAccountNameWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the account name
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateSessionAccountName(body: PutSessionAccountNameBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateSessionAccountName(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the account name
     - PUT /session/account_name
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateSessionAccountNameWithRequestBuilder(body: PutSessionAccountNameBody) -> RequestBuilder<Void> {
        let path = "/session/account_name"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the password
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSessionPassword(body: PutSessionPasswordBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateSessionPasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the password
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateSessionPassword(body: PutSessionPasswordBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateSessionPassword(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the password
     - PUT /session/password
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateSessionPasswordWithRequestBuilder(body: PutSessionPasswordBody) -> RequestBuilder<Void> {
        let path = "/session/password"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the profile
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSessionProfile(body: PutSessionProfileBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateSessionProfileWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the profile
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateSessionProfile(body: PutSessionProfileBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateSessionProfile(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the profile
     - PUT /session/profile
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateSessionProfileWithRequestBuilder(body: PutSessionProfileBody) -> RequestBuilder<Void> {
        let path = "/session/profile"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the profile image
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSessionProfileImage(body: PutSessionProfileImageBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateSessionProfileImageWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the profile image
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateSessionProfileImage(body: PutSessionProfileImageBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateSessionProfileImage(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the profile image
     - PUT /session/profile_image
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateSessionProfileImageWithRequestBuilder(body: PutSessionProfileImageBody) -> RequestBuilder<Void> {
        let path = "/session/profile_image"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
