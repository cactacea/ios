//
// SessionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class SessionAPI {
    /**
     Remove the profile image
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProfileImage(completion: @escaping ((_ error: Error?) -> Void)) {
        deleteProfileImageWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Remove the profile image
     
     - returns: Observable<Void>
     */
    open class func deleteProfileImage() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteProfileImage() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Remove the profile image
     - DELETE /session/profile_image
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteProfileImageWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/session/profile_image"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get basic information about session account
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func find(completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        findWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get basic information about session account
     
     - returns: Observable<Account>
     */
    open class func find() -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            find() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get basic information about session account
     - GET /session
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}}]

     - returns: RequestBuilder<Account> 
     */
    open class func findWithRequestBuilder() -> RequestBuilder<Account> {
        let path = "/session"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Account>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get feeds list session account posted
     
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findFeeds(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Feed]?,_ error: Error?) -> Void)) {
        findFeedsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get feeds list session account posted
     
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Feed]>
     */
    open class func findFeeds(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Feed]> {
        return Observable.create { observer -> Disposable in
            findFeeds(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get feeds list session account posted
     - GET /session/feeds
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "contentWarning" : true,
  "likedAt" : 3.61607674925191080461672754609026014804840087890625,
  "postedAt" : 9,
  "contentDeleted" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
}, {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "contentWarning" : true,
  "likedAt" : 3.61607674925191080461672754609026014804840087890625,
  "postedAt" : 9,
  "contentDeleted" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
} ]}]
     
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Feed]> 
     */
    open class func findFeedsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Feed]> {
        let path = "/session/feeds"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Feed]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get accounts list session account is followed by
     
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findFollowers(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        findFollowersWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get accounts list session account is followed by
     
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Account]>
     */
    open class func findFollowers(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Account]> {
        return Observable.create { observer -> Disposable in
            findFollowers(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get accounts list session account is followed by
     - GET /session/followers
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
} ]}]
     
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Account]> 
     */
    open class func findFollowersWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Account]> {
        let path = "/session/followers"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Account]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get accounts list session account followed
     
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findFollows(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        findFollowsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get accounts list session account followed
     
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Account]>
     */
    open class func findFollows(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Account]> {
        return Observable.create { observer -> Disposable in
            findFollows(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get accounts list session account followed
     - GET /session/follows
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
} ]}]
     
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Account]> 
     */
    open class func findFollowsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Account]> {
        let path = "/session/follows"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Account]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get friend requests list session account created or received
     
     - parameter received: (query) Filters friend requests which you have received or sent. 
     - parameter since: (query) Filters friend requests which started on since or later. (optional)
     - parameter offset: (query) The offset of friend request. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friend request returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findFriendRequests(received: Bool, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [FriendRequest]?,_ error: Error?) -> Void)) {
        findFriendRequestsWithRequestBuilder(received: received, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get friend requests list session account created or received
     
     - parameter received: (query) Filters friend requests which you have received or sent. 
     - parameter since: (query) Filters friend requests which started on since or later. (optional)
     - parameter offset: (query) The offset of friend request. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friend request returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[FriendRequest]>
     */
    open class func findFriendRequests(received: Bool, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[FriendRequest]> {
        return Observable.create { observer -> Disposable in
            findFriendRequests(received: received, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get friend requests list session account created or received
     - GET /session/requests
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 1.46581298050294517310021547018550336360931396484375,
  "requestedAt" : 6,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "requestStatus" : "noResponded"
}, {
  "next" : 1.46581298050294517310021547018550336360931396484375,
  "requestedAt" : 6,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "requestStatus" : "noResponded"
} ]}]
     
     - parameter received: (query) Filters friend requests which you have received or sent. 
     - parameter since: (query) Filters friend requests which started on since or later. (optional)
     - parameter offset: (query) The offset of friend request. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friend request returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[FriendRequest]> 
     */
    open class func findFriendRequestsWithRequestBuilder(received: Bool, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[FriendRequest]> {
        let path = "/session/requests"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count, 
            "received": received
        ])
        

        let requestBuilder: RequestBuilder<[FriendRequest]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sortType
     */
    public enum SortType_findFriends: String { 
        case friendsat = "friendsAt"
        case accountname = "accountName"
    }

    /**
     Get friends list
     
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter sortType: (query) Friends which sorted by accountName or friendsAt. Default is friendsAt. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findFriends(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, sortType: SortType_findFriends? = nil, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        findFriendsWithRequestBuilder(since: since, offset: offset, count: count, sortType: sortType).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get friends list
     
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter sortType: (query) Friends which sorted by accountName or friendsAt. Default is friendsAt. (optional)
     - returns: Observable<[Account]>
     */
    open class func findFriends(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, sortType: SortType_findFriends? = nil) -> Observable<[Account]> {
        return Observable.create { observer -> Disposable in
            findFriends(since: since, offset: offset, count: count, sortType: sortType) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get friends list
     - GET /session/friends
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
} ]}]
     
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter sortType: (query) Friends which sorted by accountName or friendsAt. Default is friendsAt. (optional)

     - returns: RequestBuilder<[Account]> 
     */
    open class func findFriendsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, sortType: SortType_findFriends? = nil) -> RequestBuilder<[Account]> {
        let path = "/session/friends"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count, 
            "sortType": sortType?.rawValue
        ])
        

        let requestBuilder: RequestBuilder<[Account]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get invitations list session account received
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of group invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findGroupInvitations(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [GroupInvitation]?,_ error: Error?) -> Void)) {
        findGroupInvitationsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get invitations list session account received
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of group invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[GroupInvitation]>
     */
    open class func findGroupInvitations(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[GroupInvitation]> {
        return Observable.create { observer -> Disposable in
            findGroupInvitations(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get invitations list session account received
     - GET /session/invitations
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 1.46581298050294517310021547018550336360931396484375,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "invitationStatus" : "noResponded",
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "group" : {
    "next" : 2.027123023002321833274663731572218239307403564453125,
    "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
    "groupPrivacyType" : "everyone",
    "accountCount" : 7,
    "name" : "name",
    "invitationOnly" : true,
    "id" : 0.80082819046101150206595775671303272247314453125,
    "message" : {
      "next" : 2.3021358869347654518833223846741020679473876953125,
      "contentWarning" : true,
      "readAccountCount" : 5,
      "accountCount" : 1,
      "messageType" : "text",
      "postedAt" : 5,
      "unread" : true,
      "contentDeleted" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "medium" : {
        "contentWarning" : true,
        "size" : 5,
        "contentDeleted" : true,
        "width" : 1,
        "mediumType" : "image",
        "id" : 6.02745618307040320615897144307382404804229736328125,
        "uri" : "uri",
        "height" : 5,
        "thumbnailUrl" : "thumbnailUrl"
      },
      "message" : "message",
      "account" : {
        "birthday" : 2.3021358869347654518833223846741020679473876953125,
        "next" : 9.301444243932575517419536481611430644989013671875,
        "follower" : true,
        "followCount" : 6.02745618307040320615897144307382404804229736328125,
        "friendCount" : 5.962133916683182377482808078639209270477294921875,
        "accountName" : "accountName",
        "displayName" : "displayName",
        "joinedAt" : 7.061401241503109105224211816675961017608642578125,
        "bio" : "bio",
        "mute" : true,
        "follow" : true,
        "friendRequestInProgress" : true,
        "feedsCount" : 5.63737665663332876420099637471139430999755859375,
        "web" : "web",
        "friend" : true,
        "location" : "location",
        "id" : 0.80082819046101150206595775671303272247314453125,
        "profileImageUrl" : "profileImageUrl",
        "followerCount" : 1.46581298050294517310021547018550336360931396484375
      }
    },
    "authorityType" : "owner",
    "organizedAt" : 3
  },
  "invitedAt" : 6
}, {
  "next" : 1.46581298050294517310021547018550336360931396484375,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "invitationStatus" : "noResponded",
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "group" : {
    "next" : 2.027123023002321833274663731572218239307403564453125,
    "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
    "groupPrivacyType" : "everyone",
    "accountCount" : 7,
    "name" : "name",
    "invitationOnly" : true,
    "id" : 0.80082819046101150206595775671303272247314453125,
    "message" : {
      "next" : 2.3021358869347654518833223846741020679473876953125,
      "contentWarning" : true,
      "readAccountCount" : 5,
      "accountCount" : 1,
      "messageType" : "text",
      "postedAt" : 5,
      "unread" : true,
      "contentDeleted" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "medium" : {
        "contentWarning" : true,
        "size" : 5,
        "contentDeleted" : true,
        "width" : 1,
        "mediumType" : "image",
        "id" : 6.02745618307040320615897144307382404804229736328125,
        "uri" : "uri",
        "height" : 5,
        "thumbnailUrl" : "thumbnailUrl"
      },
      "message" : "message",
      "account" : {
        "birthday" : 2.3021358869347654518833223846741020679473876953125,
        "next" : 9.301444243932575517419536481611430644989013671875,
        "follower" : true,
        "followCount" : 6.02745618307040320615897144307382404804229736328125,
        "friendCount" : 5.962133916683182377482808078639209270477294921875,
        "accountName" : "accountName",
        "displayName" : "displayName",
        "joinedAt" : 7.061401241503109105224211816675961017608642578125,
        "bio" : "bio",
        "mute" : true,
        "follow" : true,
        "friendRequestInProgress" : true,
        "feedsCount" : 5.63737665663332876420099637471139430999755859375,
        "web" : "web",
        "friend" : true,
        "location" : "location",
        "id" : 0.80082819046101150206595775671303272247314453125,
        "profileImageUrl" : "profileImageUrl",
        "followerCount" : 1.46581298050294517310021547018550336360931396484375
      }
    },
    "authorityType" : "owner",
    "organizedAt" : 3
  },
  "invitedAt" : 6
} ]}]
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of group invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[GroupInvitation]> 
     */
    open class func findGroupInvitationsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[GroupInvitation]> {
        let path = "/session/invitations"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[GroupInvitation]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findGroups(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findGroupsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findGroups(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findGroups(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get groups list session account joined
     - GET /session/groups
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
}, {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
} ]}]
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func findGroupsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        let path = "/session/groups"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get hidden groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findHides(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findHidesWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get hidden groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findHides(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findHides(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get hidden groups list session account joined
     - GET /session/hides
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
}, {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
} ]}]
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func findHidesWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        let path = "/session/hides"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get feeds list session account set a like
     
     - parameter since: (query) Filters entries which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findLikes(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Feed]?,_ error: Error?) -> Void)) {
        findLikesWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get feeds list session account set a like
     
     - parameter since: (query) Filters entries which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Feed]>
     */
    open class func findLikes(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Feed]> {
        return Observable.create { observer -> Disposable in
            findLikes(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get feeds list session account set a like
     - GET /session/likes
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "contentWarning" : true,
  "likedAt" : 3.61607674925191080461672754609026014804840087890625,
  "postedAt" : 9,
  "contentDeleted" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
}, {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "contentWarning" : true,
  "likedAt" : 3.61607674925191080461672754609026014804840087890625,
  "postedAt" : 9,
  "contentDeleted" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "contentWarning" : true,
    "size" : 5,
    "contentDeleted" : true,
    "width" : 1,
    "mediumType" : "image",
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "feedsCount" : 5.63737665663332876420099637471139430999755859375,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  },
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
} ]}]
     
     - parameter since: (query) Filters entries which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Feed]> 
     */
    open class func findLikesWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Feed]> {
        let path = "/session/likes"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Feed]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get accounts list session account muted
     
     - parameter since: (query) Filters accounts which started on since or later. (optional)
     - parameter offset: (query) The offset of accounts. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of accounts returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findMutes(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Account]?,_ error: Error?) -> Void)) {
        findMutesWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get accounts list session account muted
     
     - parameter since: (query) Filters accounts which started on since or later. (optional)
     - parameter offset: (query) The offset of accounts. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of accounts returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Account]>
     */
    open class func findMutes(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Account]> {
        return Observable.create { observer -> Disposable in
            findMutes(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get accounts list session account muted
     - GET /session/mutes
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 9.301444243932575517419536481611430644989013671875,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "feedsCount" : 5.63737665663332876420099637471139430999755859375,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
} ]}]
     
     - parameter since: (query) Filters accounts which started on since or later. (optional)
     - parameter offset: (query) The offset of accounts. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of accounts returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Account]> 
     */
    open class func findMutesWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Account]> {
        let path = "/session/mutes"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Account]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sign out
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signOut(completion: @escaping ((_ error: Error?) -> Void)) {
        signOutWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Sign out
     
     - returns: Observable<Void>
     */
    open class func signOut() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            signOut() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign out
     - DELETE /session
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth

     - returns: RequestBuilder<Void> 
     */
    open class func signOutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/session"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the account name
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAccountName(body: PutSessionAccountNameBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateAccountNameWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the account name
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateAccountName(body: PutSessionAccountNameBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateAccountName(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the account name
     - PUT /session/account_name
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateAccountNameWithRequestBuilder(body: PutSessionAccountNameBody) -> RequestBuilder<Void> {
        let path = "/session/account_name"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the password
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePassword(body: PutSessionPasswordBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updatePasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the password
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updatePassword(body: PutSessionPasswordBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updatePassword(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the password
     - PUT /session/password
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updatePasswordWithRequestBuilder(body: PutSessionPasswordBody) -> RequestBuilder<Void> {
        let path = "/session/password"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the profile
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProfile(body: PutSessionProfileBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateProfileWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the profile
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateProfile(body: PutSessionProfileBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateProfile(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the profile
     - PUT /session/profile
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateProfileWithRequestBuilder(body: PutSessionProfileBody) -> RequestBuilder<Void> {
        let path = "/session/profile"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the profile image
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProfileImage(body: PutSessionProfileImageBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateProfileImageWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the profile image
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateProfileImage(body: PutSessionProfileImageBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateProfileImage(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the profile image
     - PUT /session/profile_image
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateProfileImageWithRequestBuilder(body: PutSessionProfileImageBody) -> RequestBuilder<Void> {
        let path = "/session/profile_image"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
