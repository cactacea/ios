//
// SessionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class SessionAPI {
    /**
     Remove the profile image
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProfileImage(completion: @escaping ((_ error: Error?) -> Void)) {
        deleteProfileImageWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Remove the profile image
     
     - returns: Observable<Void>
     */
    open class func deleteProfileImage() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteProfileImage() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Remove the profile image
     - DELETE /session/profile_image

     - returns: RequestBuilder<Void> 
     */
    open class func deleteProfileImageWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/session/profile_image"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirm user name exist
     
     - parameter userName: (path) User name. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func existUserName(userName: String, completion: @escaping ((_ data: UserNameNotExists?,_ error: Error?) -> Void)) {
        existUserNameWithRequestBuilder(userName: userName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Confirm user name exist
     
     - parameter userName: (path) User name. 
     - returns: Observable<UserNameNotExists>
     */
    open class func existUserName(userName: String) -> Observable<UserNameNotExists> {
        return Observable.create { observer -> Disposable in
            existUserName(userName: userName) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Confirm user name exist
     - GET /session/username/{userName}
     - examples: [{contentType=application/json, example={
  "exists" : true,
  "userName" : "userName"
}}]
     
     - parameter userName: (path) User name. 

     - returns: RequestBuilder<UserNameNotExists> 
     */
    open class func existUserNameWithRequestBuilder(userName: String) -> RequestBuilder<UserNameNotExists> {
        var path = "/session/username/{userName}"
        path = path.replacingOccurrences(of: "{userName}", with: "\(userName)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserNameNotExists>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get user information
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSession(completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        findSessionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get user information
     
     - returns: Observable<User>
     */
    open class func findSession() -> Observable<User> {
        return Observable.create { observer -> Disposable in
            findSession() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get user information
     - GET /session
     - examples: [{contentType=application/json, example={
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}}]

     - returns: RequestBuilder<User> 
     */
    open class func findSessionWithRequestBuilder() -> RequestBuilder<User> {
        let path = "/session"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get block users list
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionBlocks(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findSessionBlocksWithRequestBuilder(userName: userName, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get block users list
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findSessionBlocks(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findSessionBlocks(userName: userName, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get block users list
     - GET /session/blocks
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findSessionBlocksWithRequestBuilder(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        let path = "/session/blocks"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userName": userName, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get channels list session user channelJoined
     
     - parameter since: (query) Filters channels which started on since or later. (optional)
     - parameter offset: (query) The offset of channels. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of channels returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionChannels(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Channel]?,_ error: Error?) -> Void)) {
        findSessionChannelsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get channels list session user channelJoined
     
     - parameter since: (query) Filters channels which started on since or later. (optional)
     - parameter offset: (query) The offset of channels. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of channels returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Channel]>
     */
    open class func findSessionChannels(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Channel]> {
        return Observable.create { observer -> Disposable in
            findSessionChannels(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get channels list session user channelJoined
     - GET /session/channels
     - examples: [{contentType=application/json, example=[ {
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "feedCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
}, {
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "feedCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
} ]}]
     
     - parameter since: (query) Filters channels which started on since or later. (optional)
     - parameter offset: (query) The offset of channels. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of channels returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Channel]> 
     */
    open class func findSessionChannelsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Channel]> {
        let path = "/session/channels"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Channel]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter feedPrivacyType
     */
    public enum FeedPrivacyType_findSessionFeeds: String { 
        case everyone = "everyone"
        case followers = "followers"
        case friends = "friends"
        case _self = "self"
    }

    /**
     Find session feeds
     
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter feedPrivacyType: (query) Feed privacy type. By default the value is everyone. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionFeeds(since: Int64? = nil, offset: Int64? = nil, feedPrivacyType: FeedPrivacyType_findSessionFeeds? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Feed]?,_ error: Error?) -> Void)) {
        findSessionFeedsWithRequestBuilder(since: since, offset: offset, feedPrivacyType: feedPrivacyType, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find session feeds
     
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter feedPrivacyType: (query) Feed privacy type. By default the value is everyone. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Feed]>
     */
    open class func findSessionFeeds(since: Int64? = nil, offset: Int64? = nil, feedPrivacyType: FeedPrivacyType_findSessionFeeds? = nil, count: Int64? = nil) -> Observable<[Feed]> {
        return Observable.create { observer -> Disposable in
            findSessionFeeds(since: since, offset: offset, feedPrivacyType: feedPrivacyType, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find session feeds
     - GET /session/feeds
     - examples: [{contentType=application/json, example=[ {
  "next" : 3,
  "postedAt" : 9,
  "rejected" : true,
  "warning" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "liked" : true,
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
}, {
  "next" : 3,
  "postedAt" : 9,
  "rejected" : true,
  "warning" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "liked" : true,
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
} ]}]
     
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter feedPrivacyType: (query) Feed privacy type. By default the value is everyone. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Feed]> 
     */
    open class func findSessionFeedsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, feedPrivacyType: FeedPrivacyType_findSessionFeeds? = nil, count: Int64? = nil) -> RequestBuilder<[Feed]> {
        let path = "/session/feeds"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "feedPrivacyType": feedPrivacyType?.rawValue, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Feed]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get users list session user is followed by
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionFollowers(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findSessionFollowersWithRequestBuilder(userName: userName, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get users list session user is followed by
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findSessionFollowers(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findSessionFollowers(userName: userName, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get users list session user is followed by
     - GET /session/followers
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findSessionFollowersWithRequestBuilder(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        let path = "/session/followers"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userName": userName, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get users list session user followed
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionFollows(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findSessionFollowsWithRequestBuilder(userName: userName, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get users list session user followed
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findSessionFollows(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findSessionFollows(userName: userName, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get users list session user followed
     - GET /session/follows
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findSessionFollowsWithRequestBuilder(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        let path = "/session/follows"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userName": userName, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get friend requests list session user created or received
     
     - parameter received: (query) Filters friend requests which you have received or sent. 
     - parameter since: (query) Filters friend requests which started on since or later. (optional)
     - parameter offset: (query) The offset of friend request. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friend request returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionFriendRequests(received: Bool, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [FriendRequest]?,_ error: Error?) -> Void)) {
        findSessionFriendRequestsWithRequestBuilder(received: received, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get friend requests list session user created or received
     
     - parameter received: (query) Filters friend requests which you have received or sent. 
     - parameter since: (query) Filters friend requests which started on since or later. (optional)
     - parameter offset: (query) The offset of friend request. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friend request returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[FriendRequest]>
     */
    open class func findSessionFriendRequests(received: Bool, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[FriendRequest]> {
        return Observable.create { observer -> Disposable in
            findSessionFriendRequests(received: received, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get friend requests list session user created or received
     - GET /session/requests
     - examples: [{contentType=application/json, example=[ {
  "next" : 1,
  "requestedAt" : 6,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  }
}, {
  "next" : 1,
  "requestedAt" : 6,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  }
} ]}]
     
     - parameter received: (query) Filters friend requests which you have received or sent. 
     - parameter since: (query) Filters friend requests which started on since or later. (optional)
     - parameter offset: (query) The offset of friend request. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friend request returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[FriendRequest]> 
     */
    open class func findSessionFriendRequestsWithRequestBuilder(received: Bool, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[FriendRequest]> {
        let path = "/session/requests"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count, 
            "received": received
        ])
        

        let requestBuilder: RequestBuilder<[FriendRequest]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get friends list
     
     - parameter userName: (query) Filters friends which started on (optional)
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionFriends(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findSessionFriendsWithRequestBuilder(userName: userName, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get friends list
     
     - parameter userName: (query) Filters friends which started on (optional)
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findSessionFriends(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findSessionFriends(userName: userName, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get friends list
     - GET /session/friends
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter userName: (query) Filters friends which started on (optional)
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findSessionFriendsWithRequestBuilder(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        let path = "/session/friends"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userName": userName, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get hidden channels list session user channelJoined
     
     - parameter since: (query) Filters channels which started on since or later. (optional)
     - parameter offset: (query) The offset of channels. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of channels returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionHiddenChannels(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Channel]?,_ error: Error?) -> Void)) {
        findSessionHiddenChannelsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get hidden channels list session user channelJoined
     
     - parameter since: (query) Filters channels which started on since or later. (optional)
     - parameter offset: (query) The offset of channels. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of channels returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Channel]>
     */
    open class func findSessionHiddenChannels(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Channel]> {
        return Observable.create { observer -> Disposable in
            findSessionHiddenChannels(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get hidden channels list session user channelJoined
     - GET /session/hides
     - examples: [{contentType=application/json, example=[ {
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "feedCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
}, {
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "feedCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
} ]}]
     
     - parameter since: (query) Filters channels which started on since or later. (optional)
     - parameter offset: (query) The offset of channels. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of channels returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Channel]> 
     */
    open class func findSessionHiddenChannelsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Channel]> {
        let path = "/session/hides"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Channel]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get invitations list session user received
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionInvitations(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Invitation]?,_ error: Error?) -> Void)) {
        findSessionInvitationsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get invitations list session user received
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Invitation]>
     */
    open class func findSessionInvitations(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Invitation]> {
        return Observable.create { observer -> Disposable in
            findSessionInvitations(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get invitations list session user received
     - GET /session/invitations
     - examples: [{contentType=application/json, example=[ {
  "next" : 1,
  "channel" : {
    "next" : 4.1456080298839363962315474054776132106781005859375,
    "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
    "userCount" : 9,
    "name" : "name",
    "invitationOnly" : true,
    "id" : 0.80082819046101150206595775671303272247314453125,
    "message" : {
      "next" : 7,
      "unread" : true,
      "rejected" : true,
      "readUserCount" : 5,
      "medium" : {
        "size" : 5,
        "rejected" : true,
        "width" : 1,
        "mediumType" : "image",
        "warning" : true,
        "id" : 6.02745618307040320615897144307382404804229736328125,
        "uri" : "uri",
        "height" : 5,
        "thumbnailUrl" : "thumbnailUrl"
      },
      "message" : "message",
      "messageType" : "text",
      "userCount" : 5,
      "postedAt" : 2,
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "user" : {
        "birthday" : 2.3021358869347654518833223846741020679473876953125,
        "next" : 3,
        "followCount" : 6,
        "friendCount" : 5,
        "userStatus" : "normally",
        "displayName" : "displayName",
        "joinedAt" : 7.061401241503109105224211816675961017608642578125,
        "feedCount" : 5,
        "bio" : "bio",
        "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
        "userName" : "userName",
        "follow" : true,
        "friendRequestInProgress" : true,
        "blocked" : true,
        "web" : "web",
        "isFriend" : true,
        "location" : "location",
        "id" : 0.80082819046101150206595775671303272247314453125,
        "isFollower" : true,
        "profileImageUrl" : "profileImageUrl",
        "followerCount" : 1,
        "muted" : true
      },
      "channelId" : 1.46581298050294517310021547018550336360931396484375
    },
    "authorityType" : "organizer",
    "organizedAt" : 2,
    "privacyType" : "everyone"
  },
  "id" : 0.80082819046101150206595775671303272247314453125,
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "invitedAt" : 6
}, {
  "next" : 1,
  "channel" : {
    "next" : 4.1456080298839363962315474054776132106781005859375,
    "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
    "userCount" : 9,
    "name" : "name",
    "invitationOnly" : true,
    "id" : 0.80082819046101150206595775671303272247314453125,
    "message" : {
      "next" : 7,
      "unread" : true,
      "rejected" : true,
      "readUserCount" : 5,
      "medium" : {
        "size" : 5,
        "rejected" : true,
        "width" : 1,
        "mediumType" : "image",
        "warning" : true,
        "id" : 6.02745618307040320615897144307382404804229736328125,
        "uri" : "uri",
        "height" : 5,
        "thumbnailUrl" : "thumbnailUrl"
      },
      "message" : "message",
      "messageType" : "text",
      "userCount" : 5,
      "postedAt" : 2,
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "user" : {
        "birthday" : 2.3021358869347654518833223846741020679473876953125,
        "next" : 3,
        "followCount" : 6,
        "friendCount" : 5,
        "userStatus" : "normally",
        "displayName" : "displayName",
        "joinedAt" : 7.061401241503109105224211816675961017608642578125,
        "feedCount" : 5,
        "bio" : "bio",
        "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
        "userName" : "userName",
        "follow" : true,
        "friendRequestInProgress" : true,
        "blocked" : true,
        "web" : "web",
        "isFriend" : true,
        "location" : "location",
        "id" : 0.80082819046101150206595775671303272247314453125,
        "isFollower" : true,
        "profileImageUrl" : "profileImageUrl",
        "followerCount" : 1,
        "muted" : true
      },
      "channelId" : 1.46581298050294517310021547018550336360931396484375
    },
    "authorityType" : "organizer",
    "organizedAt" : 2,
    "privacyType" : "everyone"
  },
  "id" : 0.80082819046101150206595775671303272247314453125,
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "invitedAt" : 6
} ]}]
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Invitation]> 
     */
    open class func findSessionInvitationsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Invitation]> {
        let path = "/session/invitations"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Invitation]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get feeds list session user set a like
     
     - parameter since: (query) Filters entries which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionLikes(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Feed]?,_ error: Error?) -> Void)) {
        findSessionLikesWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get feeds list session user set a like
     
     - parameter since: (query) Filters entries which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Feed]>
     */
    open class func findSessionLikes(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Feed]> {
        return Observable.create { observer -> Disposable in
            findSessionLikes(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get feeds list session user set a like
     - GET /session/likes
     - examples: [{contentType=application/json, example=[ {
  "next" : 3,
  "postedAt" : 9,
  "rejected" : true,
  "warning" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "liked" : true,
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
}, {
  "next" : 3,
  "postedAt" : 9,
  "rejected" : true,
  "warning" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "liked" : true,
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
} ]}]
     
     - parameter since: (query) Filters entries which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Feed]> 
     */
    open class func findSessionLikesWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Feed]> {
        let path = "/session/likes"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Feed]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get users list session user muted
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionMutes(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findSessionMutesWithRequestBuilder(userName: userName, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get users list session user muted
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findSessionMutes(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findSessionMutes(userName: userName, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get users list session user muted
     - GET /session/mutes
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findSessionMutesWithRequestBuilder(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        let path = "/session/mutes"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userName": userName, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find users
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 users. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUsers(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findUsersWithRequestBuilder(userName: userName, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Find users
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 users. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findUsers(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findUsers(userName: userName, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Find users
     - GET /users
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 users. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findUsersWithRequestBuilder(userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        let path = "/users"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userName": userName, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Register user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerSession(completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        registerSessionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Register user
     
     - returns: Observable<User>
     */
    open class func registerSession() -> Observable<User> {
        return Observable.create { observer -> Disposable in
            registerSession() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Register user
     - POST /session
     - examples: [{contentType=application/json, example={
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}}]

     - returns: RequestBuilder<User> 
     */
    open class func registerSessionWithRequestBuilder() -> RequestBuilder<User> {
        let path = "/session"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sign out
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signOut(completion: @escaping ((_ error: Error?) -> Void)) {
        signOutWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Sign out
     
     - returns: Observable<Void>
     */
    open class func signOut() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            signOut() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign out
     - DELETE /session

     - returns: RequestBuilder<Void> 
     */
    open class func signOutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/session"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the password
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updatePassword(body: PutPasswordBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updatePasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the password
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updatePassword(body: PutPasswordBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updatePassword(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the password
     - PUT /session/password
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updatePasswordWithRequestBuilder(body: PutPasswordBody) -> RequestBuilder<Void> {
        let path = "/session/password"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the profile
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProfile(body: PutSessionProfileBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateProfileWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the profile
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateProfile(body: PutSessionProfileBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateProfile(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the profile
     - PUT /session/profile
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateProfileWithRequestBuilder(body: PutSessionProfileBody) -> RequestBuilder<Void> {
        let path = "/session/profile"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the profile image
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProfileImage(body: PutSessionProfileImageBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateProfileImageWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the profile image
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateProfileImage(body: PutSessionProfileImageBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateProfileImage(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the profile image
     - PUT /session/profile_image
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateProfileImageWithRequestBuilder(body: PutSessionProfileImageBody) -> RequestBuilder<Void> {
        let path = "/session/profile_image"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update the user name
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserName(body: PutUserNameBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserNameWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update the user name
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateUserName(body: PutUserNameBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateUserName(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update the user name
     - PUT /session/username
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserNameWithRequestBuilder(body: PutUserNameBody) -> RequestBuilder<Void> {
        let path = "/session/username"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
