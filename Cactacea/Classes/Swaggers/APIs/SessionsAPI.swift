//
// SessionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class SessionsAPI {
    /**
     Sign in
     
     - parameter name: (query) Account name. 
     - parameter password: (query) Account password. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter userAgent: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signIn(name: String, password: String, udid: String, userAgent: String? = nil, completion: @escaping ((_ data: Authentication?,_ error: Error?) -> Void)) {
        signInWithRequestBuilder(name: name, password: password, udid: udid, userAgent: userAgent).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Sign in
     
     - parameter name: (query) Account name. 
     - parameter password: (query) Account password. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter userAgent: (header)  (optional)
     - returns: Observable<Authentication>
     */
    open class func signIn(name: String, password: String, udid: String, userAgent: String? = nil) -> Observable<Authentication> {
        return Observable.create { observer -> Disposable in
            signIn(name: name, password: password, udid: udid, userAgent: userAgent) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign in
     - GET /sessions
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "accessToken" : "accessToken",
  "account" : {
    "birthday" : 5.63737665663332876420099637471139430999755859375,
    "next" : 7,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  }
}}]
     
     - parameter name: (query) Account name. 
     - parameter password: (query) Account password. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter userAgent: (header)  (optional)

     - returns: RequestBuilder<Authentication> 
     */
    open class func signInWithRequestBuilder(name: String, password: String, udid: String, userAgent: String? = nil) -> RequestBuilder<Authentication> {
        let path = "/sessions"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "name": name, 
            "password": password, 
            "udid": udid
        ])
        
        let nillableHeaders: [String: Any?] = [
            "user_agent": userAgent
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Authentication>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Sign up
     
     - parameter body: (body)  
     - parameter userAgent: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signUp(body: PostSignUpBody, userAgent: String? = nil, completion: @escaping ((_ data: Authentication?,_ error: Error?) -> Void)) {
        signUpWithRequestBuilder(body: body, userAgent: userAgent).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Sign up
     
     - parameter body: (body)  
     - parameter userAgent: (header)  (optional)
     - returns: Observable<Authentication>
     */
    open class func signUp(body: PostSignUpBody, userAgent: String? = nil) -> Observable<Authentication> {
        return Observable.create { observer -> Disposable in
            signUp(body: body, userAgent: userAgent) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign up
     - POST /sessions
     - examples: [{contentType=application/json, example={
  "accessToken" : "accessToken",
  "account" : {
    "birthday" : 5.63737665663332876420099637471139430999755859375,
    "next" : 7,
    "follower" : true,
    "followCount" : 6.02745618307040320615897144307382404804229736328125,
    "friendCount" : 5.962133916683182377482808078639209270477294921875,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
    "bio" : "bio",
    "mute" : true,
    "follow" : true,
    "friendRequestInProgress" : true,
    "web" : "web",
    "friend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1.46581298050294517310021547018550336360931396484375
  }
}}]
     
     - parameter body: (body)  
     - parameter userAgent: (header)  (optional)

     - returns: RequestBuilder<Authentication> 
     */
    open class func signUpWithRequestBuilder(body: PostSignUpBody, userAgent: String? = nil) -> RequestBuilder<Authentication> {
        let path = "/sessions"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "user_agent": userAgent
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Authentication>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
