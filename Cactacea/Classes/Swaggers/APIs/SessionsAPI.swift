//
// SessionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class SessionsAPI {
    /**
     Sign in
     
     - parameter accountName: (query) Account name. 
     - parameter password: (query) Account password. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signIn(accountName: String, password: String, udid: String, completion: @escaping ((_ data: Authentication?,_ error: Error?) -> Void)) {
        signInWithRequestBuilder(accountName: accountName, password: password, udid: udid).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Sign in
     
     - parameter accountName: (query) Account name. 
     - parameter password: (query) Account password. 
     - parameter udid: (query) Unique Device Identifier. 
     - returns: Observable<Authentication>
     */
    open class func signIn(accountName: String, password: String, udid: String) -> Observable<Authentication> {
        return Observable.create { observer -> Disposable in
            signIn(accountName: accountName, password: password, udid: udid) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign in
     - GET /sessions
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "accessToken" : "accessToken",
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "friendCount" : 5,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "followingCount" : 6,
    "friendRequestInProgress" : true,
    "feedsCount" : 5,
    "muting" : true,
    "web" : "web",
    "blocking" : true,
    "following" : true,
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1
  }
}}]
     
     - parameter accountName: (query) Account name. 
     - parameter password: (query) Account password. 
     - parameter udid: (query) Unique Device Identifier. 

     - returns: RequestBuilder<Authentication> 
     */
    open class func signInWithRequestBuilder(accountName: String, password: String, udid: String) -> RequestBuilder<Authentication> {
        let path = "/sessions"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "accountName": accountName, 
            "password": password, 
            "udid": udid
        ])
        

        let requestBuilder: RequestBuilder<Authentication>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sign up
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signUp(body: PostSignUpBody, completion: @escaping ((_ data: Authentication?,_ error: Error?) -> Void)) {
        signUpWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Sign up
     
     - parameter body: (body)  
     - returns: Observable<Authentication>
     */
    open class func signUp(body: PostSignUpBody) -> Observable<Authentication> {
        return Observable.create { observer -> Disposable in
            signUp(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign up
     - POST /sessions
     - examples: [{contentType=application/json, example={
  "accessToken" : "accessToken",
  "account" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 9.301444243932575517419536481611430644989013671875,
    "friendCount" : 5,
    "accountName" : "accountName",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "bio" : "bio",
    "followingCount" : 6,
    "friendRequestInProgress" : true,
    "feedsCount" : 5,
    "muting" : true,
    "web" : "web",
    "blocking" : true,
    "following" : true,
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1
  }
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<Authentication> 
     */
    open class func signUpWithRequestBuilder(body: PostSignUpBody) -> RequestBuilder<Authentication> {
        let path = "/sessions"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Authentication>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
