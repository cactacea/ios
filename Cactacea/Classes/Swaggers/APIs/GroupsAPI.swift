//
// GroupsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class GroupsAPI {
    /**
     Create a group
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroup(body: PostGroupBody, completion: @escaping ((_ data: GroupCreated?,_ error: Error?) -> Void)) {
        createGroupWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a group
     
     - parameter body: (body)  
     - returns: Observable<GroupCreated>
     */
    open class func createGroup(body: PostGroupBody) -> Observable<GroupCreated> {
        return Observable.create { observer -> Disposable in
            createGroup(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a group
     - POST /groups
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "id" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<GroupCreated> 
     */
    open class func createGroupWithRequestBuilder(body: PostGroupBody) -> RequestBuilder<GroupCreated> {
        let path = "/groups"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GroupCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Hide a group and delete all messages
     
     - parameter id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGroup(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteGroupWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Hide a group and delete all messages
     
     - parameter id: (path) Group identifier. 
     - returns: Observable<Void>
     */
    open class func deleteGroup(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteGroup(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Hide a group and delete all messages
     - DELETE /groups/{id}
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteGroupWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a direct message group to a account
     
     - parameter id: (path) Account identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAccountGroup(id: Int64, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        findAccountGroupWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get a direct message group to a account
     
     - parameter id: (path) Account identifier. 
     - returns: Observable<Group>
     */
    open class func findAccountGroup(id: Int64) -> Observable<Group> {
        return Observable.create { observer -> Disposable in
            findAccountGroup(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get a direct message group to a account
     - GET /accounts/{id}/group
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
}}]
     
     - parameter id: (path) Account identifier. 

     - returns: RequestBuilder<Group> 
     */
    open class func findAccountGroupWithRequestBuilder(id: Int64) -> RequestBuilder<Group> {
        var path = "/accounts/{id}/group"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Group>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get groups list a account joined
     
     - parameter id: (path) Account identifier. 
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 groups. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAccountGroups(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findAccountGroupsWithRequestBuilder(id: id, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get groups list a account joined
     
     - parameter id: (path) Account identifier. 
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 groups. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findAccountGroups(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findAccountGroups(id: id, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get groups list a account joined
     - GET /accounts/{id}/groups
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
}, {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
} ]}]
     
     - parameter id: (path) Account identifier. 
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 groups. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func findAccountGroupsWithRequestBuilder(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        var path = "/accounts/{id}/groups"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get basic information about a group
     
     - parameter id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findGroup(id: Int64, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        findGroupWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get basic information about a group
     
     - parameter id: (path) Group identifier. 
     - returns: Observable<Group>
     */
    open class func findGroup(id: Int64) -> Observable<Group> {
        return Observable.create { observer -> Disposable in
            findGroup(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get basic information about a group
     - GET /groups/{id}
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
}}]
     
     - parameter id: (path) Group identifier. 

     - returns: RequestBuilder<Group> 
     */
    open class func findGroupWithRequestBuilder(id: Int64) -> RequestBuilder<Group> {
        var path = "/groups/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Group>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get accounts list of a group
     
     - parameter id: (path) Group identifier. 
     - parameter since: (query) Filters accounts which started on since or later. (optional)
     - parameter offset: (query) The offset of accounts. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of accounts returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findGroupAccounts(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findGroupAccountsWithRequestBuilder(id: id, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get accounts list of a group
     
     - parameter id: (path) Group identifier. 
     - parameter since: (query) Filters accounts which started on since or later. (optional)
     - parameter offset: (query) The offset of accounts. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of accounts returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findGroupAccounts(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findGroupAccounts(id: id, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get accounts list of a group
     - GET /groups/{id}/accounts
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
}, {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
} ]}]
     
     - parameter id: (path) Group identifier. 
     - parameter since: (query) Filters accounts which started on since or later. (optional)
     - parameter offset: (query) The offset of accounts. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of accounts returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func findGroupAccountsWithRequestBuilder(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        var path = "/groups/{id}/accounts"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter groupPrivacyType
     */
    public enum GroupPrivacyType_findGroups: String { 
        case everyone = "everyone"
        case follows = "follows"
        case followers = "followers"
        case friends = "friends"
    }

    /**
     Search groups
     
     - parameter groupName: (query) Filters groups which group name start of. (optional)
     - parameter invitationOnly: (query) Filters groups that invited accounts can join in. (optional)
     - parameter groupPrivacyType: (query) Filters groups which can join in. (optional)
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of messages. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findGroups(groupName: String? = nil, invitationOnly: Int64? = nil, groupPrivacyType: GroupPrivacyType_findGroups? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findGroupsWithRequestBuilder(groupName: groupName, invitationOnly: invitationOnly, groupPrivacyType: groupPrivacyType, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Search groups
     
     - parameter groupName: (query) Filters groups which group name start of. (optional)
     - parameter invitationOnly: (query) Filters groups that invited accounts can join in. (optional)
     - parameter groupPrivacyType: (query) Filters groups which can join in. (optional)
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of messages. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findGroups(groupName: String? = nil, invitationOnly: Int64? = nil, groupPrivacyType: GroupPrivacyType_findGroups? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findGroups(groupName: groupName, invitationOnly: invitationOnly, groupPrivacyType: groupPrivacyType, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Search groups
     - GET /groups
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
}, {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
} ]}]
     
     - parameter groupName: (query) Filters groups which group name start of. (optional)
     - parameter invitationOnly: (query) Filters groups that invited accounts can join in. (optional)
     - parameter groupPrivacyType: (query) Filters groups which can join in. (optional)
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of messages. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func findGroupsWithRequestBuilder(groupName: String? = nil, invitationOnly: Int64? = nil, groupPrivacyType: GroupPrivacyType_findGroups? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        let path = "/groups"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "groupName": groupName, 
            "invitationOnly": invitationOnly, 
            "groupPrivacyType": groupPrivacyType?.rawValue, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionGroups(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findSessionGroupsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findSessionGroups(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findSessionGroups(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get groups list session account joined
     - GET /session/groups
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
}, {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
} ]}]
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func findSessionGroupsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        let path = "/session/groups"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get hidden groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionHides(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findSessionHidesWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get hidden groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findSessionHides(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findSessionHides(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get hidden groups list session account joined
     - GET /session/hides
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
}, {
  "next" : 2.027123023002321833274663731572218239307403564453125,
  "lastPostedAt" : 9.301444243932575517419536481611430644989013671875,
  "groupPrivacyType" : "everyone",
  "accountCount" : 7,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 2.3021358869347654518833223846741020679473876953125,
    "contentWarning" : true,
    "readAccountCount" : 5,
    "accountCount" : 1,
    "messageType" : "text",
    "postedAt" : 5,
    "unread" : true,
    "contentDeleted" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "medium" : {
      "contentWarning" : true,
      "size" : 5,
      "contentDeleted" : true,
      "width" : 1,
      "mediumType" : "image",
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "account" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 9.301444243932575517419536481611430644989013671875,
      "follower" : true,
      "followCount" : 6.02745618307040320615897144307382404804229736328125,
      "friendCount" : 5.962133916683182377482808078639209270477294921875,
      "accountName" : "accountName",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "bio" : "bio",
      "mute" : true,
      "follow" : true,
      "friendRequestInProgress" : true,
      "feedsCount" : 5.63737665663332876420099637471139430999755859375,
      "web" : "web",
      "friend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1.46581298050294517310021547018550336360931396484375
    }
  },
  "authorityType" : "owner",
  "organizedAt" : 3
} ]}]
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Group]> 
     */
    open class func findSessionHidesWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        let path = "/session/hides"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Hide a group
     
     - parameter id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func hideGroup(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        hideGroupWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Hide a group
     
     - parameter id: (path) Group identifier. 
     - returns: Observable<Void>
     */
    open class func hideGroup(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            hideGroup(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Hide a group
     - POST /groups/{id}/hides
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func hideGroupWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}/hides"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Join a account in a group
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func joinAccountToGroup(accountId: Int64, groupId: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        joinAccountToGroupWithRequestBuilder(accountId: accountId, groupId: groupId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Join a account in a group
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - returns: Observable<Void>
     */
    open class func joinAccountToGroup(accountId: Int64, groupId: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            joinAccountToGroup(accountId: accountId, groupId: groupId) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Join a account in a group
     - POST /accounts/{accountId}/groups/{groupId}/join
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func joinAccountToGroupWithRequestBuilder(accountId: Int64, groupId: Int64) -> RequestBuilder<Void> {
        var path = "/accounts/{accountId}/groups/{groupId}/join"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{groupId}", with: "\(groupId)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Join to a group,
     
     - parameter id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func joinToGroup(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        joinToGroupWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Join to a group,
     
     - parameter id: (path) Group identifier. 
     - returns: Observable<Void>
     */
    open class func joinToGroup(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            joinToGroup(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Join to a group,
     - POST /groups/{id}/join
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func joinToGroupWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}/join"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Leave a account from a group
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func leaveAccountFromGroup(accountId: Int64, groupId: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        leaveAccountFromGroupWithRequestBuilder(accountId: accountId, groupId: groupId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Leave a account from a group
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - returns: Observable<Void>
     */
    open class func leaveAccountFromGroup(accountId: Int64, groupId: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            leaveAccountFromGroup(accountId: accountId, groupId: groupId) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Leave a account from a group
     - POST /accounts/{accountId}/groups/{groupId}/leave
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func leaveAccountFromGroupWithRequestBuilder(accountId: Int64, groupId: Int64) -> RequestBuilder<Void> {
        var path = "/accounts/{accountId}/groups/{groupId}/leave"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{groupId}", with: "\(groupId)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Leave from a group
     
     - parameter id: (path) Group invitation identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func leaveFromGroup(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        leaveFromGroupWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Leave from a group
     
     - parameter id: (path) Group invitation identifier. 
     - returns: Observable<Void>
     */
    open class func leaveFromGroup(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            leaveFromGroup(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Leave from a group
     - POST /groups/{id}/leave
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group invitation identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func leaveFromGroupWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}/leave"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Report a group
     
     - parameter id: (path) Group identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportGroup(id: Int64, body: PostGroupReportBody, completion: @escaping ((_ error: Error?) -> Void)) {
        reportGroupWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Report a group
     
     - parameter id: (path) Group identifier. 
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func reportGroup(id: Int64, body: PostGroupReportBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            reportGroup(id: id, body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Report a group
     - POST /groups/{id}/reports
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func reportGroupWithRequestBuilder(id: Int64, body: PostGroupReportBody) -> RequestBuilder<Void> {
        var path = "/groups/{id}/reports"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Show a group
     
     - parameter id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func showGroup(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        showGroupWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Show a group
     
     - parameter id: (path) Group identifier. 
     - returns: Observable<Void>
     */
    open class func showGroup(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            showGroup(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Show a group
     - DELETE /groups/{id}/hides
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func showGroupWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}/hides"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a group
     
     - parameter id: (path) Group identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateGroup(id: Int64, body: PutGroupBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateGroupWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update a group
     
     - parameter id: (path) Group identifier. 
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateGroup(id: Int64, body: PutGroupBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateGroup(id: id, body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update a group
     - PUT /groups/{id}
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Group identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateGroupWithRequestBuilder(id: Int64, body: PutGroupBody) -> RequestBuilder<Void> {
        var path = "/groups/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
