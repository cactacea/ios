//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class UsersAPI {
    /**
     Block an user
     
     - parameter id: (path) User Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func block(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        blockWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Block an user
     
     - parameter id: (path) User Identifier. 
     - returns: Observable<Void>
     */
    open class func block(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            block(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Block an user
     - POST /users/{id}/blocks
     
     - parameter id: (path) User Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func blockWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/users/{id}/blocks"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a friend request to an user
     
     - parameter id: (path) User Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRequest(id: Int64, completion: @escaping ((_ data: FriendRequestCreated?,_ error: Error?) -> Void)) {
        createRequestWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a friend request to an user
     
     - parameter id: (path) User Identifier. 
     - returns: Observable<FriendRequestCreated>
     */
    open class func createRequest(id: Int64) -> Observable<FriendRequestCreated> {
        return Observable.create { observer -> Disposable in
            createRequest(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a friend request to an user
     - POST /users/{id}/requests
     - examples: [{contentType=application/json, example={
  "id" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter id: (path) User Identifier. 

     - returns: RequestBuilder<FriendRequestCreated> 
     */
    open class func createRequestWithRequestBuilder(id: Int64) -> RequestBuilder<FriendRequestCreated> {
        var path = "/users/{id}/requests"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<FriendRequestCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a invitation 
     
     - parameter channelId: (path) Channel Identifier. 
     - parameter userId: (path) User Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteInvitation(channelId: Int64, userId: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteInvitationWithRequestBuilder(channelId: channelId, userId: userId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Delete a invitation 
     
     - parameter channelId: (path) Channel Identifier. 
     - parameter userId: (path) User Identifier. 
     - returns: Observable<Void>
     */
    open class func deleteInvitation(channelId: Int64, userId: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteInvitation(channelId: channelId, userId: userId) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a invitation 
     - DELETE /invitations
     
     - parameter channelId: (path) Channel Identifier. 
     - parameter userId: (path) User Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteInvitationWithRequestBuilder(channelId: Int64, userId: Int64) -> RequestBuilder<Void> {
        var path = "/invitations"
        path = path.replacingOccurrences(of: "{channelId}", with: "\(channelId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a friend request to an user
     
     - parameter id: (path) User identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteRequest(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteRequestWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Remove a friend request to an user
     
     - parameter id: (path) User identifier. 
     - returns: Observable<Void>
     */
    open class func deleteRequest(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteRequest(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Remove a friend request to an user
     - DELETE /users/{id}/requests
     
     - parameter id: (path) User identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteRequestWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/users/{id}/requests"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get users list an user follows
     
     - parameter id: (path) User Identifier. 
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findFollow(id: Int64, userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findFollowWithRequestBuilder(id: id, userName: userName, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get users list an user follows
     
     - parameter id: (path) User Identifier. 
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findFollow(id: Int64, userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findFollow(id: id, userName: userName, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get users list an user follows
     - GET /users/{id}/follows
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter id: (path) User Identifier. 
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters follower which started on since or later. (optional)
     - parameter offset: (query) The offset of follower. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of follower returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findFollowWithRequestBuilder(id: Int64, userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        var path = "/users/{id}/follows"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userName": userName, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get information about an user
     
     - parameter id: (path) User identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUser(id: Int64, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        findUserWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get information about an user
     
     - parameter id: (path) User identifier. 
     - returns: Observable<User>
     */
    open class func findUser(id: Int64) -> Observable<User> {
        return Observable.create { observer -> Disposable in
            findUser(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get information about an user
     - GET /users/{id}
     - examples: [{contentType=application/json, example={
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}}]
     
     - parameter id: (path) User identifier. 

     - returns: RequestBuilder<User> 
     */
    open class func findUserWithRequestBuilder(id: Int64) -> RequestBuilder<User> {
        var path = "/users/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<User>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a direct message channel to an user
     
     - parameter id: (path) User identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUserChannel(id: Int64, completion: @escaping ((_ data: Channel?,_ error: Error?) -> Void)) {
        findUserChannelWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get a direct message channel to an user
     
     - parameter id: (path) User identifier. 
     - returns: Observable<Channel>
     */
    open class func findUserChannel(id: Int64) -> Observable<Channel> {
        return Observable.create { observer -> Disposable in
            findUserChannel(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get a direct message channel to an user
     - GET /users/{id}/channel
     - examples: [{contentType=application/json, example={
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "feedCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
}}]
     
     - parameter id: (path) User identifier. 

     - returns: RequestBuilder<Channel> 
     */
    open class func findUserChannelWithRequestBuilder(id: Int64) -> RequestBuilder<Channel> {
        var path = "/users/{id}/channel"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Channel>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get channels list an user channelJoined
     
     - parameter id: (path) User identifier. 
     - parameter since: (query) Filters channels which started on since or later. (optional)
     - parameter offset: (query) The offset of channels. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of channels returned on one result page. By default the value is 20 channels. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUserChannels(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Channel]?,_ error: Error?) -> Void)) {
        findUserChannelsWithRequestBuilder(id: id, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get channels list an user channelJoined
     
     - parameter id: (path) User identifier. 
     - parameter since: (query) Filters channels which started on since or later. (optional)
     - parameter offset: (query) The offset of channels. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of channels returned on one result page. By default the value is 20 channels. The page size can never be larger than 50. (optional)
     - returns: Observable<[Channel]>
     */
    open class func findUserChannels(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Channel]> {
        return Observable.create { observer -> Disposable in
            findUserChannels(id: id, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get channels list an user channelJoined
     - GET /users/{id}/channels
     - examples: [{contentType=application/json, example=[ {
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "feedCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
}, {
  "next" : 4.1456080298839363962315474054776132106781005859375,
  "lastPostedAt" : 3.61607674925191080461672754609026014804840087890625,
  "userCount" : 9,
  "name" : "name",
  "invitationOnly" : true,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : {
    "next" : 7,
    "unread" : true,
    "rejected" : true,
    "readUserCount" : 5,
    "medium" : {
      "size" : 5,
      "rejected" : true,
      "width" : 1,
      "mediumType" : "image",
      "warning" : true,
      "id" : 6.02745618307040320615897144307382404804229736328125,
      "uri" : "uri",
      "height" : 5,
      "thumbnailUrl" : "thumbnailUrl"
    },
    "message" : "message",
    "messageType" : "text",
    "userCount" : 5,
    "postedAt" : 2,
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "user" : {
      "birthday" : 2.3021358869347654518833223846741020679473876953125,
      "next" : 3,
      "followCount" : 6,
      "friendCount" : 5,
      "userStatus" : "normally",
      "displayName" : "displayName",
      "joinedAt" : 7.061401241503109105224211816675961017608642578125,
      "feedCount" : 5,
      "bio" : "bio",
      "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
      "userName" : "userName",
      "follow" : true,
      "friendRequestInProgress" : true,
      "blocked" : true,
      "web" : "web",
      "isFriend" : true,
      "location" : "location",
      "id" : 0.80082819046101150206595775671303272247314453125,
      "isFollower" : true,
      "profileImageUrl" : "profileImageUrl",
      "followerCount" : 1,
      "muted" : true
    },
    "channelId" : 1.46581298050294517310021547018550336360931396484375
  },
  "authorityType" : "organizer",
  "organizedAt" : 2,
  "privacyType" : "everyone"
} ]}]
     
     - parameter id: (path) User identifier. 
     - parameter since: (query) Filters channels which started on since or later. (optional)
     - parameter offset: (query) The offset of channels. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of channels returned on one result page. By default the value is 20 channels. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Channel]> 
     */
    open class func findUserChannelsWithRequestBuilder(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Channel]> {
        var path = "/users/{id}/channels"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Channel]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get feeds list an user posted
     
     - parameter id: (path) User Identifier. 
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUserFeeds(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Feed]?,_ error: Error?) -> Void)) {
        findUserFeedsWithRequestBuilder(id: id, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get feeds list an user posted
     
     - parameter id: (path) User Identifier. 
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Feed]>
     */
    open class func findUserFeeds(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Feed]> {
        return Observable.create { observer -> Disposable in
            findUserFeeds(id: id, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get feeds list an user posted
     - GET /users/{id}/feeds
     - examples: [{contentType=application/json, example=[ {
  "next" : 3,
  "postedAt" : 9,
  "rejected" : true,
  "warning" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "liked" : true,
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
}, {
  "next" : 3,
  "postedAt" : 9,
  "rejected" : true,
  "warning" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "liked" : true,
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
} ]}]
     
     - parameter id: (path) User Identifier. 
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of feeds returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Feed]> 
     */
    open class func findUserFeedsWithRequestBuilder(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Feed]> {
        var path = "/users/{id}/feeds"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Feed]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get user's liked feeds
     
     - parameter id: (path) User Identifier. 
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of entries returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUserFeedsLiked(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Feed]?,_ error: Error?) -> Void)) {
        findUserFeedsLikedWithRequestBuilder(id: id, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get user's liked feeds
     
     - parameter id: (path) User Identifier. 
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of entries returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Feed]>
     */
    open class func findUserFeedsLiked(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Feed]> {
        return Observable.create { observer -> Disposable in
            findUserFeedsLiked(id: id, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get user's liked feeds
     - GET /users/{id}/likes
     - examples: [{contentType=application/json, example=[ {
  "next" : 3,
  "postedAt" : 9,
  "rejected" : true,
  "warning" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "liked" : true,
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
}, {
  "next" : 3,
  "postedAt" : 9,
  "rejected" : true,
  "warning" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "feedCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "liked" : true,
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
} ]}]
     
     - parameter id: (path) User Identifier. 
     - parameter since: (query) Filters feeds which started on since or later. (optional)
     - parameter offset: (query) The offset of feeds. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of entries returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Feed]> 
     */
    open class func findUserFeedsLikedWithRequestBuilder(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Feed]> {
        var path = "/users/{id}/likes"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Feed]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get users list an user is followed by
     
     - parameter id: (path) User Identifier. 
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUserFollowers(id: Int64, userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findUserFollowersWithRequestBuilder(id: id, userName: userName, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get users list an user is followed by
     
     - parameter id: (path) User Identifier. 
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findUserFollowers(id: Int64, userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findUserFollowers(id: id, userName: userName, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get users list an user is followed by
     - GET /users/{id}/followers
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter id: (path) User Identifier. 
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters followers which started on since or later. (optional)
     - parameter offset: (query) The offset of followers. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of followers returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findUserFollowersWithRequestBuilder(id: Int64, userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        var path = "/users/{id}/followers"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userName": userName, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an user's friends list
     
     - parameter id: (path) User Identifier. 
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUserFriends(id: Int64, userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findUserFriendsWithRequestBuilder(id: id, userName: userName, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get an user's friends list
     
     - parameter id: (path) User Identifier. 
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findUserFriends(id: Int64, userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findUserFriends(id: id, userName: userName, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get an user's friends list
     - GET /users/{id}/friends
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter id: (path) User Identifier. 
     - parameter userName: (query) Filters users whose user name start of. (optional)
     - parameter since: (query) Filters friends which started on since or later. (optional)
     - parameter offset: (query) The offset of friends. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of friends returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findUserFriendsWithRequestBuilder(id: Int64, userName: String? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        var path = "/users/{id}/friends"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userName": userName, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get user on
     
     - parameter id: (path) User identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUserStatus(id: Int64, completion: @escaping ((_ data: UserStatus?,_ error: Error?) -> Void)) {
        findUserStatusWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get user on
     
     - parameter id: (path) User identifier. 
     - returns: Observable<UserStatus>
     */
    open class func findUserStatus(id: Int64) -> Observable<UserStatus> {
        return Observable.create { observer -> Disposable in
            findUserStatus(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get user on
     - GET /users/{id}/status
     - examples: [{contentType=application/json, example={
  "id" : 0.80082819046101150206595775671303272247314453125,
  "status" : "active"
}}]
     
     - parameter id: (path) User identifier. 

     - returns: RequestBuilder<UserStatus> 
     */
    open class func findUserStatusWithRequestBuilder(id: Int64) -> RequestBuilder<UserStatus> {
        var path = "/users/{id}/status"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserStatus>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Follow an user
     
     - parameter id: (path) User Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func followUser(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        followUserWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Follow an user
     
     - parameter id: (path) User Identifier. 
     - returns: Observable<Void>
     */
    open class func followUser(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            followUser(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Follow an user
     - POST /users/{id}/follow
     
     - parameter id: (path) User Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func followUserWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/users/{id}/follow"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Join an user in a channel
     
     - parameter userId: (path) User Identifier. 
     - parameter channelId: (path) Channel Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func joinUser(userId: Int64, channelId: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        joinUserWithRequestBuilder(userId: userId, channelId: channelId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Join an user in a channel
     
     - parameter userId: (path) User Identifier. 
     - parameter channelId: (path) Channel Identifier. 
     - returns: Observable<Void>
     */
    open class func joinUser(userId: Int64, channelId: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            joinUser(userId: userId, channelId: channelId) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Join an user in a channel
     - POST /users/{userId}/channels/{channelId}/join
     
     - parameter userId: (path) User Identifier. 
     - parameter channelId: (path) Channel Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func joinUserWithRequestBuilder(userId: Int64, channelId: Int64) -> RequestBuilder<Void> {
        var path = "/users/{userId}/channels/{channelId}/join"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{channelId}", with: "\(channelId)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Leave an user from a channel
     
     - parameter userId: (path) User Identifier. 
     - parameter channelId: (path) Channel Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func leaveUser(userId: Int64, channelId: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        leaveUserWithRequestBuilder(userId: userId, channelId: channelId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Leave an user from a channel
     
     - parameter userId: (path) User Identifier. 
     - parameter channelId: (path) Channel Identifier. 
     - returns: Observable<Void>
     */
    open class func leaveUser(userId: Int64, channelId: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            leaveUser(userId: userId, channelId: channelId) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Leave an user from a channel
     - POST /users/{userId}/channels/{channelId}/leave
     
     - parameter userId: (path) User Identifier. 
     - parameter channelId: (path) Channel Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func leaveUserWithRequestBuilder(userId: Int64, channelId: Int64) -> RequestBuilder<Void> {
        var path = "/users/{userId}/channels/{channelId}/leave"
        path = path.replacingOccurrences(of: "{userId}", with: "\(userId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{channelId}", with: "\(channelId)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Mute an user
     
     - parameter id: (path) User Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func muteUser(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        muteUserWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Mute an user
     
     - parameter id: (path) User Identifier. 
     - returns: Observable<Void>
     */
    open class func muteUser(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            muteUser(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Mute an user
     - POST /users/{id}/mutes
     
     - parameter id: (path) User Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func muteUserWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/users/{id}/mutes"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Report an user
     
     - parameter id: (path) User Identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportUser(id: Int64, body: PostUserReportBody, completion: @escaping ((_ error: Error?) -> Void)) {
        reportUserWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Report an user
     
     - parameter id: (path) User Identifier. 
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func reportUser(id: Int64, body: PostUserReportBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            reportUser(id: id, body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Report an user
     - POST /users/{id}/reports
     
     - parameter id: (path) User Identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func reportUserWithRequestBuilder(id: Int64, body: PostUserReportBody) -> RequestBuilder<Void> {
        var path = "/users/{id}/reports"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Unblock an user
     
     - parameter id: (path) User identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unblock(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        unblockWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Unblock an user
     
     - parameter id: (path) User identifier. 
     - returns: Observable<Void>
     */
    open class func unblock(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            unblock(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Unblock an user
     - DELETE /users/{id}/blocks
     
     - parameter id: (path) User identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func unblockWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/users/{id}/blocks"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     UnFollow an user
     
     - parameter id: (path) User Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unfollowUser(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        unfollowUserWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     UnFollow an user
     
     - parameter id: (path) User Identifier. 
     - returns: Observable<Void>
     */
    open class func unfollowUser(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            unfollowUser(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     UnFollow an user
     - DELETE /users/{id}/follow
     
     - parameter id: (path) User Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func unfollowUserWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/users/{id}/follow"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove friendship to an user
     
     - parameter id: (path) User identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unfriend(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        unfriendWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Remove friendship to an user
     
     - parameter id: (path) User identifier. 
     - returns: Observable<Void>
     */
    open class func unfriend(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            unfriend(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Remove friendship to an user
     - DELETE /users/{id}/friends
     
     - parameter id: (path) User identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func unfriendWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/users/{id}/friends"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unmute an user
     
     - parameter id: (path) User identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unmuteUser(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        unmuteUserWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Unmute an user
     
     - parameter id: (path) User identifier. 
     - returns: Observable<Void>
     */
    open class func unmuteUser(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            unmuteUser(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Unmute an user
     - DELETE /users/{id}/mutes
     
     - parameter id: (path) User identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func unmuteUserWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/users/{id}/mutes"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Change display name to session user
     
     - parameter id: (path) User Identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserDisplayName(id: Int64, body: PutUserDisplayNameBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateUserDisplayNameWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Change display name to session user
     
     - parameter id: (path) User Identifier. 
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateUserDisplayName(id: Int64, body: PutUserDisplayNameBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateUserDisplayName(id: id, body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Change display name to session user
     - PUT /users/{id}/display_name
     
     - parameter id: (path) User Identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserDisplayNameWithRequestBuilder(id: Int64, body: PutUserDisplayNameBody) -> RequestBuilder<Void> {
        var path = "/users/{id}/display_name"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
