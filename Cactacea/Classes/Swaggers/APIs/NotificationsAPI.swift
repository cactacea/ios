//
// NotificationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class NotificationsAPI {
    /**
     Search informations
     
     - parameter body: (body)  
     - parameter since: (query) Filters notifications which started on since or later. (optional)
     - parameter offset: (query) The offset of notifications. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of notifications returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findInformations(body: GetNotificationsBody, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Information]?,_ error: Error?) -> Void)) {
        findInformationsWithRequestBuilder(body: body, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Search informations
     
     - parameter body: (body)  
     - parameter since: (query) Filters notifications which started on since or later. (optional)
     - parameter offset: (query) The offset of notifications. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of notifications returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Information]>
     */
    open class func findInformations(body: GetNotificationsBody, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Information]> {
        return Observable.create { observer -> Disposable in
            findInformations(body: body, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Search informations
     - GET /informations
     - examples: [{contentType=application/json, example=[ {
  "next" : 5,
  "contentId" : 6.02745618307040320615897144307382404804229736328125,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "notifiedAt" : 1,
  "informationType" : "operator",
  "url" : "url"
}, {
  "next" : 5,
  "contentId" : 6.02745618307040320615897144307382404804229736328125,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "notifiedAt" : 1,
  "informationType" : "operator",
  "url" : "url"
} ]}]
     
     - parameter body: (body)  
     - parameter since: (query) Filters notifications which started on since or later. (optional)
     - parameter offset: (query) The offset of notifications. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of notifications returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[Information]> 
     */
    open class func findInformationsWithRequestBuilder(body: GetNotificationsBody, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Information]> {
        let path = "/informations"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[Information]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
