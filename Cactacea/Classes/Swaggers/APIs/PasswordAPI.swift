//
// PasswordAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class PasswordAPI {
    /**
     Recover password
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func recoverPassword(body: PostRecoverPasswordBody, completion: @escaping ((_ error: Error?) -> Void)) {
        recoverPasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Recover password
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func recoverPassword(body: PostRecoverPasswordBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            recoverPassword(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Recover password
     - POST /password/recover
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func recoverPasswordWithRequestBuilder(body: PostRecoverPasswordBody) -> RequestBuilder<Void> {
        let path = "/password/recover"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset Password
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetPassword(body: PostResetPasswordBody, completion: @escaping ((_ error: Error?) -> Void)) {
        resetPasswordWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Reset Password
     
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func resetPassword(body: PostResetPasswordBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            resetPassword(body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Reset Password
     - POST /password/reset
     
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func resetPasswordWithRequestBuilder(body: PostResetPasswordBody) -> RequestBuilder<Void> {
        let path = "/password/reset"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
