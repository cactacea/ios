//
// SocialAccountsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class SocialAccountsAPI {
    /**
     Connect to social account
     
     - parameter accessTokenKey: (query) OAuth2 access token. 
     - parameter accessTokenSecret: (query) OAuth2 access token secret. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connect(accessTokenKey: String, accessTokenSecret: String, body: PostSocialAccountBody, completion: @escaping ((_ error: Error?) -> Void)) {
        connectWithRequestBuilder(accessTokenKey: accessTokenKey, accessTokenSecret: accessTokenSecret, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Connect to social account
     
     - parameter accessTokenKey: (query) OAuth2 access token. 
     - parameter accessTokenSecret: (query) OAuth2 access token secret. 
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func connect(accessTokenKey: String, accessTokenSecret: String, body: PostSocialAccountBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            connect(accessTokenKey: accessTokenKey, accessTokenSecret: accessTokenSecret, body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Connect to social account
     - POST /social_accounts
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter accessTokenKey: (query) OAuth2 access token. 
     - parameter accessTokenSecret: (query) OAuth2 access token secret. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func connectWithRequestBuilder(accessTokenKey: String, accessTokenSecret: String, body: PostSocialAccountBody) -> RequestBuilder<Void> {
        let path = "/social_accounts"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "access_token_key": accessTokenKey, 
            "access_token_secret": accessTokenSecret
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Disconnect from social account
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disconnect(completion: @escaping ((_ error: Error?) -> Void)) {
        disconnectWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Disconnect from social account
     
     - returns: Observable<Void>
     */
    open class func disconnect() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            disconnect() { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Disconnect from social account
     - DELETE /social_accounts
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth

     - returns: RequestBuilder<Void> 
     */
    open class func disconnectWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/social_accounts"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get status abount social accounts
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionSocialAccounts(completion: @escaping ((_ data: [SocialAccount]?,_ error: Error?) -> Void)) {
        findSessionSocialAccountsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get status abount social accounts
     
     - returns: Observable<[SocialAccount]>
     */
    open class func findSessionSocialAccounts() -> Observable<[SocialAccount]> {
        return Observable.create { observer -> Disposable in
            findSessionSocialAccounts() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get status abount social accounts
     - GET /social_accounts
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example=[ {
  "providerId" : "providerId",
  "providerKey" : "providerKey"
}, {
  "providerId" : "providerId",
  "providerKey" : "providerKey"
} ]}]

     - returns: RequestBuilder<[SocialAccount]> 
     */
    open class func findSessionSocialAccountsWithRequestBuilder() -> RequestBuilder<[SocialAccount]> {
        let path = "/social_accounts"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[SocialAccount]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Issue authentication code.
     
     - parameter providerKey: (query) OAuth2 access token or phone number or email address. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueCode(providerKey: String, body: GetAuthenticationCodeBody, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        issueCodeWithRequestBuilder(providerKey: providerKey, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Issue authentication code.
     
     - parameter providerKey: (query) OAuth2 access token or phone number or email address. 
     - parameter body: (body)  
     - returns: Observable<Account>
     */
    open class func issueCode(providerKey: String, body: GetAuthenticationCodeBody) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            issueCode(providerKey: providerKey, body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Issue authentication code.
     - GET /sessions/social_accounts/issue_code
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "birthday" : 5.63737665663332876420099637471139430999755859375,
  "next" : 7,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}}]
     
     - parameter providerKey: (query) OAuth2 access token or phone number or email address. 
     - parameter body: (body)  

     - returns: RequestBuilder<Account> 
     */
    open class func issueCodeWithRequestBuilder(providerKey: String, body: GetAuthenticationCodeBody) -> RequestBuilder<Account> {
        let path = "/sessions/social_accounts/issue_code"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "provider_key": providerKey
        ])
        

        let requestBuilder: RequestBuilder<Account>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sign in by social accounts
     
     - parameter providerKey: (query) OAuth2 access token or phone number or email address. 
     - parameter authenticationCode: (query) OAuth2 access token secret or issued code. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter body: (body)  
     - parameter userAgent: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func socialSignIn(providerKey: String, authenticationCode: String, udid: String, body: GetSocialAccountSignInBody, userAgent: String? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        socialSignInWithRequestBuilder(providerKey: providerKey, authenticationCode: authenticationCode, udid: udid, body: body, userAgent: userAgent).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Sign in by social accounts
     
     - parameter providerKey: (query) OAuth2 access token or phone number or email address. 
     - parameter authenticationCode: (query) OAuth2 access token secret or issued code. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter body: (body)  
     - parameter userAgent: (header)  (optional)
     - returns: Observable<Account>
     */
    open class func socialSignIn(providerKey: String, authenticationCode: String, udid: String, body: GetSocialAccountSignInBody, userAgent: String? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            socialSignIn(providerKey: providerKey, authenticationCode: authenticationCode, udid: udid, body: body, userAgent: userAgent) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign in by social accounts
     - GET /sessions/social_accounts
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "birthday" : 5.63737665663332876420099637471139430999755859375,
  "next" : 7,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}}]
     
     - parameter providerKey: (query) OAuth2 access token or phone number or email address. 
     - parameter authenticationCode: (query) OAuth2 access token secret or issued code. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter body: (body)  
     - parameter userAgent: (header)  (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func socialSignInWithRequestBuilder(providerKey: String, authenticationCode: String, udid: String, body: GetSocialAccountSignInBody, userAgent: String? = nil) -> RequestBuilder<Account> {
        let path = "/sessions/social_accounts"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "provider_key": providerKey, 
            "authentication_code": authenticationCode, 
            "udid": udid
        ])
        
        let nillableHeaders: [String: Any?] = [
            "user_agent": userAgent
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Account>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Sign up by social accounts
     
     - parameter providerKey: (query) OAuth2 access token or phone number or email address. 
     - parameter authenticationCode: (query) OAuth2 access token secret or issued code. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter body: (body)  
     - parameter userAgent: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func socialSignUp(providerKey: String, authenticationCode: String, udid: String, body: PostSocialAccountSignUpBody, userAgent: String? = nil, completion: @escaping ((_ data: Account?,_ error: Error?) -> Void)) {
        socialSignUpWithRequestBuilder(providerKey: providerKey, authenticationCode: authenticationCode, udid: udid, body: body, userAgent: userAgent).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Sign up by social accounts
     
     - parameter providerKey: (query) OAuth2 access token or phone number or email address. 
     - parameter authenticationCode: (query) OAuth2 access token secret or issued code. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter body: (body)  
     - parameter userAgent: (header)  (optional)
     - returns: Observable<Account>
     */
    open class func socialSignUp(providerKey: String, authenticationCode: String, udid: String, body: PostSocialAccountSignUpBody, userAgent: String? = nil) -> Observable<Account> {
        return Observable.create { observer -> Disposable in
            socialSignUp(providerKey: providerKey, authenticationCode: authenticationCode, udid: udid, body: body, userAgent: userAgent) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign up by social accounts
     - POST /sessions/social_accounts
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "birthday" : 5.63737665663332876420099637471139430999755859375,
  "next" : 7,
  "follower" : true,
  "followCount" : 6.02745618307040320615897144307382404804229736328125,
  "friendCount" : 5.962133916683182377482808078639209270477294921875,
  "accountName" : "accountName",
  "displayName" : "displayName",
  "joinedAt" : 2.3021358869347654518833223846741020679473876953125,
  "bio" : "bio",
  "mute" : true,
  "follow" : true,
  "friendRequestInProgress" : true,
  "web" : "web",
  "friend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1.46581298050294517310021547018550336360931396484375
}}]
     
     - parameter providerKey: (query) OAuth2 access token or phone number or email address. 
     - parameter authenticationCode: (query) OAuth2 access token secret or issued code. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter body: (body)  
     - parameter userAgent: (header)  (optional)

     - returns: RequestBuilder<Account> 
     */
    open class func socialSignUpWithRequestBuilder(providerKey: String, authenticationCode: String, udid: String, body: PostSocialAccountSignUpBody, userAgent: String? = nil) -> RequestBuilder<Account> {
        let path = "/sessions/social_accounts"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "provider_key": providerKey, 
            "authentication_code": authenticationCode, 
            "udid": udid
        ])
        
        let nillableHeaders: [String: Any?] = [
            "user_agent": userAgent
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Account>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
