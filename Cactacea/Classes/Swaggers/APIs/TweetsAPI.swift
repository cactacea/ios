//
// TweetsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class TweetsAPI {
    /**
     Delete a tweet
     
     - parameter id: (path) Tweet identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTweet(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteTweetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Delete a tweet
     
     - parameter id: (path) Tweet identifier. 
     - returns: Observable<Void>
     */
    open class func deleteTweet(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteTweet(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete a tweet
     - DELETE /tweets/{id}
     
     - parameter id: (path) Tweet identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTweetWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/tweets/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get basic information about a tweet
     
     - parameter id: (path) Tweet identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findTweet(id: Int64, completion: @escaping ((_ data: Tweet?,_ error: Error?) -> Void)) {
        findTweetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get basic information about a tweet
     
     - parameter id: (path) Tweet identifier. 
     - returns: Observable<Tweet>
     */
    open class func findTweet(id: Int64) -> Observable<Tweet> {
        return Observable.create { observer -> Disposable in
            findTweet(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get basic information about a tweet
     - GET /tweets/{id}
     - examples: [{contentType=application/json, example={
  "next" : 3,
  "postedAt" : 9,
  "rejected" : true,
  "warning" : true,
  "likeCount" : 2,
  "id" : 0.80082819046101150206595775671303272247314453125,
  "message" : "message",
  "mediums" : [ {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  }, {
    "size" : 5,
    "rejected" : true,
    "width" : 1,
    "mediumType" : "image",
    "warning" : true,
    "id" : 6.02745618307040320615897144307382404804229736328125,
    "uri" : "uri",
    "height" : 5,
    "thumbnailUrl" : "thumbnailUrl"
  } ],
  "user" : {
    "birthday" : 2.3021358869347654518833223846741020679473876953125,
    "next" : 3,
    "followCount" : 6,
    "friendCount" : 5,
    "userStatus" : "normally",
    "displayName" : "displayName",
    "joinedAt" : 7.061401241503109105224211816675961017608642578125,
    "tweetCount" : 5,
    "bio" : "bio",
    "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
    "userName" : "userName",
    "follow" : true,
    "friendRequestInProgress" : true,
    "blocked" : true,
    "web" : "web",
    "isFriend" : true,
    "location" : "location",
    "id" : 0.80082819046101150206595775671303272247314453125,
    "isFollower" : true,
    "profileImageUrl" : "profileImageUrl",
    "followerCount" : 1,
    "muted" : true
  },
  "liked" : true,
  "tags" : [ "tags", "tags" ],
  "commentCount" : 7
}}]
     
     - parameter id: (path) Tweet identifier. 

     - returns: RequestBuilder<Tweet> 
     */
    open class func findTweetWithRequestBuilder(id: Int64) -> RequestBuilder<Tweet> {
        var path = "/tweets/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Tweet>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Post a tweet
     
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTweet(body: PostTweetBody, completion: @escaping ((_ data: TweetCreated?,_ error: Error?) -> Void)) {
        postTweetWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Post a tweet
     
     - parameter body: (body)  
     - returns: Observable<TweetCreated>
     */
    open class func postTweet(body: PostTweetBody) -> Observable<TweetCreated> {
        return Observable.create { observer -> Disposable in
            postTweet(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Post a tweet
     - POST /tweets
     - examples: [{contentType=application/json, example={
  "id" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter body: (body)  

     - returns: RequestBuilder<TweetCreated> 
     */
    open class func postTweetWithRequestBuilder(body: PostTweetBody) -> RequestBuilder<TweetCreated> {
        let path = "/tweets"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TweetCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Report a tweet
     
     - parameter id: (path) Tweet identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportTweet(id: Int64, body: PostTweetReportBody, completion: @escaping ((_ error: Error?) -> Void)) {
        reportTweetWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Report a tweet
     
     - parameter id: (path) Tweet identifier. 
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func reportTweet(id: Int64, body: PostTweetReportBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            reportTweet(id: id, body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Report a tweet
     - POST /tweets/{id}/reports
     
     - parameter id: (path) Tweet identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func reportTweetWithRequestBuilder(id: Int64, body: PostTweetReportBody) -> RequestBuilder<Void> {
        var path = "/tweets/{id}/reports"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a tweet
     
     - parameter id: (path) Tweet identifier. 
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTweet(id: Int64, body: PutTweetBody, completion: @escaping ((_ error: Error?) -> Void)) {
        updateTweetWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Update a tweet
     
     - parameter id: (path) Tweet identifier. 
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open class func updateTweet(id: Int64, body: PutTweetBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateTweet(id: id, body: body) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update a tweet
     - PUT /tweets/{id}
     
     - parameter id: (path) Tweet identifier. 
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateTweetWithRequestBuilder(id: Int64, body: PutTweetBody) -> RequestBuilder<Void> {
        var path = "/tweets/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
