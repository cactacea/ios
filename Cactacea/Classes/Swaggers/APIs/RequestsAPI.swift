//
// RequestsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class RequestsAPI {
    /**
     Accept a friend request
     
     - parameter id: (path) Friend request Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accept(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        acceptWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Accept a friend request
     
     - parameter id: (path) Friend request Identifier. 
     - returns: Observable<Void>
     */
    open class func accept(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            accept(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Accept a friend request
     - POST /requests/{id}/accept
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Friend request Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func acceptWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/requests/{id}/accept"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a friend request to a account
     
     - parameter id: (path) Account Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(id: Int64, completion: @escaping ((_ data: FriendRequestCreated?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Create a friend request to a account
     
     - parameter id: (path) Account Identifier. 
     - returns: Observable<FriendRequestCreated>
     */
    open class func create(id: Int64) -> Observable<FriendRequestCreated> {
        return Observable.create { observer -> Disposable in
            create(id: id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a friend request to a account
     - POST /accounts/{id}/requests
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - examples: [{contentType=application/json, example={
  "id" : 0.80082819046101150206595775671303272247314453125
}}]
     
     - parameter id: (path) Account Identifier. 

     - returns: RequestBuilder<FriendRequestCreated> 
     */
    open class func createWithRequestBuilder(id: Int64) -> RequestBuilder<FriendRequestCreated> {
        var path = "/accounts/{id}/requests"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<FriendRequestCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a friend request to a account
     
     - parameter id: (path) Account identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Remove a friend request to a account
     
     - parameter id: (path) Account identifier. 
     - returns: Observable<Void>
     */
    open class func delete(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            delete(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Remove a friend request to a account
     - DELETE /accounts/{id}/requests
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Account identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/accounts/{id}/requests"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reject a friend request
     
     - parameter id: (path) Friend request Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reject(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        rejectWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Reject a friend request
     
     - parameter id: (path) Friend request Identifier. 
     - returns: Observable<Void>
     */
    open class func reject(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            reject(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Reject a friend request
     - POST /requests/{id}/reject
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     
     - parameter id: (path) Friend request Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func rejectWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/requests/{id}/reject"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
