//
// CommentLikesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class CommentLikesAPI {
    /**
     Get users list who liked on a comment
     
     - parameter id: (path) Comment Identifier. 
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findUsersLikedComment(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        findUsersLikedCommentWithRequestBuilder(id: id, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Get users list who liked on a comment
     
     - parameter id: (path) Comment Identifier. 
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[User]>
     */
    open class func findUsersLikedComment(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[User]> {
        return Observable.create { observer -> Disposable in
            findUsersLikedComment(id: id, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get users list who liked on a comment
     - GET /comments/{id}/likes
     - examples: [{contentType=application/json, example=[ {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
}, {
  "birthday" : 2.3021358869347654518833223846741020679473876953125,
  "next" : 3,
  "followCount" : 6,
  "friendCount" : 5,
  "userStatus" : "normally",
  "displayName" : "displayName",
  "joinedAt" : 7.061401241503109105224211816675961017608642578125,
  "feedCount" : 5,
  "bio" : "bio",
  "signedOutAt" : 9.301444243932575517419536481611430644989013671875,
  "userName" : "userName",
  "follow" : true,
  "friendRequestInProgress" : true,
  "blocked" : true,
  "web" : "web",
  "isFriend" : true,
  "location" : "location",
  "id" : 0.80082819046101150206595775671303272247314453125,
  "isFollower" : true,
  "profileImageUrl" : "profileImageUrl",
  "followerCount" : 1,
  "muted" : true
} ]}]
     
     - parameter id: (path) Comment Identifier. 
     - parameter since: (query) Filters users which started on since or later. (optional)
     - parameter offset: (query) The offset of users. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of users returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)

     - returns: RequestBuilder<[User]> 
     */
    open class func findUsersLikedCommentWithRequestBuilder(id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[User]> {
        var path = "/comments/{id}/likes"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "since": since, 
            "offset": offset, 
            "count": count
        ])
        

        let requestBuilder: RequestBuilder<[User]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Set a like on a comment
     
     - parameter id: (path) Comment Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func likeComment(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        likeCommentWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Set a like on a comment
     
     - parameter id: (path) Comment Identifier. 
     - returns: Observable<Void>
     */
    open class func likeComment(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            likeComment(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Set a like on a comment
     - POST /comments/{id}/likes
     
     - parameter id: (path) Comment Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func likeCommentWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/comments/{id}/likes"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a like on a comment
     
     - parameter id: (path) Comment Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unlikeComment(id: Int64, completion: @escaping ((_ error: Error?) -> Void)) {
        unlikeCommentWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**
     Remove a like on a comment
     
     - parameter id: (path) Comment Identifier. 
     - returns: Observable<Void>
     */
    open class func unlikeComment(id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            unlikeComment(id: id) { error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(()))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Remove a like on a comment
     - DELETE /comments/{id}/likes
     
     - parameter id: (path) Comment Identifier. 

     - returns: RequestBuilder<Void> 
     */
    open class func unlikeCommentWithRequestBuilder(id: Int64) -> RequestBuilder<Void> {
        var path = "/comments/{id}/likes"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
