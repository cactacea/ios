//
// MessagesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire
import RxSwift



open class MessagesAPI {
    /**
     Delete messages form a group
     
     - parameter deleteMessagesBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMessage(deleteMessagesBody: DeleteMessagesBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteMessageWithRequestBuilder(deleteMessagesBody: deleteMessagesBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete messages form a group
     
     - parameter deleteMessagesBody: (body)  
     - returns: Observable<Void>
     */
    open class func deleteMessage(deleteMessagesBody: DeleteMessagesBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteMessage(deleteMessagesBody: deleteMessagesBody) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Delete messages form a group
     - DELETE /messages
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter deleteMessagesBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMessageWithRequestBuilder(deleteMessagesBody: DeleteMessagesBody) -> RequestBuilder<Void> {
        let path = "/messages"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteMessagesBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Search messages
     
     - parameter _id: (query) Group identifier. 
     - parameter ascending: (query) Order by posted time. 
     - parameter since: (query) Filters messages which started on since or later. (optional)
     - parameter offset: (query) The offset of messages. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of entries returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findMessages(_id: Int64, ascending: Bool, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: Message?,_ error: Error?) -> Void)) {
        findMessagesWithRequestBuilder(_id: _id, ascending: ascending, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Search messages
     
     - parameter _id: (query) Group identifier. 
     - parameter ascending: (query) Order by posted time. 
     - parameter since: (query) Filters messages which started on since or later. (optional)
     - parameter offset: (query) The offset of messages. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of entries returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<Message>
     */
    open class func findMessages(_id: Int64, ascending: Bool, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<Message> {
        return Observable.create { observer -> Disposable in
            findMessages(_id: _id, ascending: ascending, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Search messages
     - GET /messages
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (query) Group identifier. 
     - parameter ascending: (query) Order by posted time. 
     - parameter since: (query) Filters messages which started on since or later. (optional)
     - parameter offset: (query) The offset of messages. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of entries returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: RequestBuilder<Message> 
     */
    open class func findMessagesWithRequestBuilder(_id: Int64, ascending: Bool, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<Message> {
        let path = "/messages"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": _id, 
            "since": since, 
            "offset": offset, 
            "count": count, 
            "ascending": ascending
        ])

        let requestBuilder: RequestBuilder<Message>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Post a message to a group
     
     - parameter postMessageBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMessage(postMessageBody: PostMessageBody, completion: @escaping ((_ data: MessageCreated?,_ error: Error?) -> Void)) {
        postMessageWithRequestBuilder(postMessageBody: postMessageBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Post a message to a group
     
     - parameter postMessageBody: (body)  
     - returns: Observable<MessageCreated>
     */
    open class func postMessage(postMessageBody: PostMessageBody) -> Observable<MessageCreated> {
        return Observable.create { observer -> Disposable in
            postMessage(postMessageBody: postMessageBody) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Post a message to a group
     - POST /messages
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter postMessageBody: (body)  
     - returns: RequestBuilder<MessageCreated> 
     */
    open class func postMessageWithRequestBuilder(postMessageBody: PostMessageBody) -> RequestBuilder<MessageCreated> {
        let path = "/messages"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postMessageBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MessageCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
