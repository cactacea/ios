//
// SystemAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire
import RxSwift



open class SystemAPI {
    /**
     Health checking
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pingGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pingGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Health checking
     
     - returns: Observable<Void>
     */
    open class func pingGet() -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            pingGet() { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Health checking
     - GET /ping
     - returns: RequestBuilder<Void> 
     */
    open class func pingGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/ping"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
