//
// SessionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire
import RxSwift



open class SessionsAPI {
    /**
     Sign in
     
     - parameter name: (query) Account name. 
     - parameter password: (query) Account password. 
     - parameter udid: (query) Unique Device Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signIn(name: String, password: String, udid: String, completion: @escaping ((_ data: Authentication?,_ error: Error?) -> Void)) {
        signInWithRequestBuilder(name: name, password: password, udid: udid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Sign in
     
     - parameter name: (query) Account name. 
     - parameter password: (query) Account password. 
     - parameter udid: (query) Unique Device Identifier. 
     - returns: Observable<Authentication>
     */
    open class func signIn(name: String, password: String, udid: String) -> Observable<Authentication> {
        return Observable.create { observer -> Disposable in
            signIn(name: name, password: password, udid: udid) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign in
     - GET /sessions
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - parameter name: (query) Account name. 
     - parameter password: (query) Account password. 
     - parameter udid: (query) Unique Device Identifier. 
     - returns: RequestBuilder<Authentication> 
     */
    open class func signInWithRequestBuilder(name: String, password: String, udid: String) -> RequestBuilder<Authentication> {
        let path = "/sessions"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name, 
            "password": password, 
            "udid": udid
        ])

        let requestBuilder: RequestBuilder<Authentication>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sign up
     
     - parameter postSignUpBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signUp(postSignUpBody: PostSignUpBody, completion: @escaping ((_ data: Authentication?,_ error: Error?) -> Void)) {
        signUpWithRequestBuilder(postSignUpBody: postSignUpBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Sign up
     
     - parameter postSignUpBody: (body)  
     - returns: Observable<Authentication>
     */
    open class func signUp(postSignUpBody: PostSignUpBody) -> Observable<Authentication> {
        return Observable.create { observer -> Disposable in
            signUp(postSignUpBody: postSignUpBody) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Sign up
     - POST /sessions
     - parameter postSignUpBody: (body)  
     - returns: RequestBuilder<Authentication> 
     */
    open class func signUpWithRequestBuilder(postSignUpBody: PostSignUpBody) -> RequestBuilder<Authentication> {
        let path = "/sessions"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postSignUpBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Authentication>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
