//
// GroupsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire
import RxSwift



open class GroupsAPI {
    /**
     Create a group
     
     - parameter postGroupBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroup(postGroupBody: PostGroupBody, completion: @escaping ((_ data: GroupCreated?,_ error: Error?) -> Void)) {
        createGroupWithRequestBuilder(postGroupBody: postGroupBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Create a group
     
     - parameter postGroupBody: (body)  
     - returns: Observable<GroupCreated>
     */
    open class func createGroup(postGroupBody: PostGroupBody) -> Observable<GroupCreated> {
        return Observable.create { observer -> Disposable in
            createGroup(postGroupBody: postGroupBody) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a group
     - POST /groups
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter postGroupBody: (body)  
     - returns: RequestBuilder<GroupCreated> 
     */
    open class func createGroupWithRequestBuilder(postGroupBody: PostGroupBody) -> RequestBuilder<GroupCreated> {
        let path = "/groups"
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postGroupBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GroupCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Hide a group and delete all messages
     
     - parameter _id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGroup(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteGroupWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Hide a group and delete all messages
     
     - parameter _id: (path) Group identifier. 
     - returns: Observable<Void>
     */
    open class func deleteGroup(_id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            deleteGroup(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Hide a group and delete all messages
     - DELETE /groups/{id}
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group identifier. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteGroupWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a direct message group to a account
     
     - parameter _id: (path) Account identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAccountGroup(_id: Int64, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        findAccountGroupWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get a direct message group to a account
     
     - parameter _id: (path) Account identifier. 
     - returns: Observable<Group>
     */
    open class func findAccountGroup(_id: Int64) -> Observable<Group> {
        return Observable.create { observer -> Disposable in
            findAccountGroup(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get a direct message group to a account
     - GET /accounts/{id}/group
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Account identifier. 
     - returns: RequestBuilder<Group> 
     */
    open class func findAccountGroupWithRequestBuilder(_id: Int64) -> RequestBuilder<Group> {
        var path = "/accounts/{id}/group"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Group>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get groups list a account joined
     
     - parameter _id: (path) Account identifier. 
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 groups. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findAccountGroups(_id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findAccountGroupsWithRequestBuilder(_id: _id, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get groups list a account joined
     
     - parameter _id: (path) Account identifier. 
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 groups. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findAccountGroups(_id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findAccountGroups(_id: _id, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get groups list a account joined
     - GET /accounts/{id}/groups
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Account identifier. 
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 groups. The page size can never be larger than 50. (optional)
     - returns: RequestBuilder<[Group]> 
     */
    open class func findAccountGroupsWithRequestBuilder(_id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        var path = "/accounts/{id}/groups"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since, 
            "offset": offset, 
            "count": count
        ])

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get basic information about a group
     
     - parameter _id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findGroup(_id: Int64, completion: @escaping ((_ data: Group?,_ error: Error?) -> Void)) {
        findGroupWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get basic information about a group
     
     - parameter _id: (path) Group identifier. 
     - returns: Observable<Group>
     */
    open class func findGroup(_id: Int64) -> Observable<Group> {
        return Observable.create { observer -> Disposable in
            findGroup(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get basic information about a group
     - GET /groups/{id}
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group identifier. 
     - returns: RequestBuilder<Group> 
     */
    open class func findGroupWithRequestBuilder(_id: Int64) -> RequestBuilder<Group> {
        var path = "/groups/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Group>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get accounts list of a group
     
     - parameter _id: (path) Group identifier. 
     - parameter since: (query) Filters accounts which started on since or later. (optional)
     - parameter offset: (query) The offset of accounts. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of accounts returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findGroupAccounts(_id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findGroupAccountsWithRequestBuilder(_id: _id, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get accounts list of a group
     
     - parameter _id: (path) Group identifier. 
     - parameter since: (query) Filters accounts which started on since or later. (optional)
     - parameter offset: (query) The offset of accounts. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of accounts returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findGroupAccounts(_id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findGroupAccounts(_id: _id, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get accounts list of a group
     - GET /groups/{id}/accounts
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group identifier. 
     - parameter since: (query) Filters accounts which started on since or later. (optional)
     - parameter offset: (query) The offset of accounts. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of accounts returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: RequestBuilder<[Group]> 
     */
    open class func findGroupAccountsWithRequestBuilder(_id: Int64, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        var path = "/groups/{id}/accounts"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since, 
            "offset": offset, 
            "count": count
        ])

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter privacyType
     */
    public enum PrivacyType_findGroups: String {
        case everyone = "everyone"
        case follows = "follows"
        case followers = "followers"
        case friends = "friends"
    }

    /**
     Search groups
     
     - parameter groupName: (query) Filters groups which group name start of. (optional)
     - parameter invitationOnly: (query) Filters groups that invited accounts can join in. (optional)
     - parameter privacyType: (query) Filters groups which can join in. (optional)
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of messages. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findGroups(groupName: String? = nil, invitationOnly: Int64? = nil, privacyType: PrivacyType_findGroups? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findGroupsWithRequestBuilder(groupName: groupName, invitationOnly: invitationOnly, privacyType: privacyType, since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Search groups
     
     - parameter groupName: (query) Filters groups which group name start of. (optional)
     - parameter invitationOnly: (query) Filters groups that invited accounts can join in. (optional)
     - parameter privacyType: (query) Filters groups which can join in. (optional)
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of messages. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findGroups(groupName: String? = nil, invitationOnly: Int64? = nil, privacyType: PrivacyType_findGroups? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findGroups(groupName: groupName, invitationOnly: invitationOnly, privacyType: privacyType, since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Search groups
     - GET /groups
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter groupName: (query) Filters groups which group name start of. (optional)
     - parameter invitationOnly: (query) Filters groups that invited accounts can join in. (optional)
     - parameter privacyType: (query) Filters groups which can join in. (optional)
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of messages. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: RequestBuilder<[Group]> 
     */
    open class func findGroupsWithRequestBuilder(groupName: String? = nil, invitationOnly: Int64? = nil, privacyType: PrivacyType_findGroups? = nil, since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        let path = "/groups"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "groupName": groupName, 
            "invitationOnly": invitationOnly, 
            "privacyType": privacyType?.rawValue, 
            "since": since, 
            "offset": offset, 
            "count": count
        ])

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionGroups(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findSessionGroupsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findSessionGroups(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findSessionGroups(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get groups list session account joined
     - GET /session/groups
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: RequestBuilder<[Group]> 
     */
    open class func findSessionGroupsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        let path = "/session/groups"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since, 
            "offset": offset, 
            "count": count
        ])

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get hidden groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionHides(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [Group]?,_ error: Error?) -> Void)) {
        findSessionHidesWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get hidden groups list session account joined
     
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[Group]>
     */
    open class func findSessionHides(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[Group]> {
        return Observable.create { observer -> Disposable in
            findSessionHides(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get hidden groups list session account joined
     - GET /session/hides
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter since: (query) Filters groups which started on since or later. (optional)
     - parameter offset: (query) The offset of groups. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of groups returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: RequestBuilder<[Group]> 
     */
    open class func findSessionHidesWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[Group]> {
        let path = "/session/hides"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since, 
            "offset": offset, 
            "count": count
        ])

        let requestBuilder: RequestBuilder<[Group]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Hide a group
     
     - parameter _id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func hideGroup(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        hideGroupWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Hide a group
     
     - parameter _id: (path) Group identifier. 
     - returns: Observable<Void>
     */
    open class func hideGroup(_id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            hideGroup(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Hide a group
     - POST /groups/{id}/hides
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group identifier. 
     - returns: RequestBuilder<Void> 
     */
    open class func hideGroupWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}/hides"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Join a account in a group
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func joinAccountToGroup(accountId: Int64, groupId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        joinAccountToGroupWithRequestBuilder(accountId: accountId, groupId: groupId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Join a account in a group
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - returns: Observable<Void>
     */
    open class func joinAccountToGroup(accountId: Int64, groupId: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            joinAccountToGroup(accountId: accountId, groupId: groupId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Join a account in a group
     - POST /accounts/{accountId}/groups/{groupId}/join
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - returns: RequestBuilder<Void> 
     */
    open class func joinAccountToGroupWithRequestBuilder(accountId: Int64, groupId: Int64) -> RequestBuilder<Void> {
        var path = "/accounts/{accountId}/groups/{groupId}/join"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Join to a group,
     
     - parameter _id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func joinToGroup(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        joinToGroupWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Join to a group,
     
     - parameter _id: (path) Group identifier. 
     - returns: Observable<Void>
     */
    open class func joinToGroup(_id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            joinToGroup(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Join to a group,
     - POST /groups/{id}/join
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group identifier. 
     - returns: RequestBuilder<Void> 
     */
    open class func joinToGroupWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}/join"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Leave a account from a group
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func leaveAccountFromGroup(accountId: Int64, groupId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        leaveAccountFromGroupWithRequestBuilder(accountId: accountId, groupId: groupId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Leave a account from a group
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - returns: Observable<Void>
     */
    open class func leaveAccountFromGroup(accountId: Int64, groupId: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            leaveAccountFromGroup(accountId: accountId, groupId: groupId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Leave a account from a group
     - POST /accounts/{accountId}/groups/{groupId}/leave
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - returns: RequestBuilder<Void> 
     */
    open class func leaveAccountFromGroupWithRequestBuilder(accountId: Int64, groupId: Int64) -> RequestBuilder<Void> {
        var path = "/accounts/{accountId}/groups/{groupId}/leave"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Leave from a group
     
     - parameter _id: (path) Group invitation identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func leaveFromGroup(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        leaveFromGroupWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Leave from a group
     
     - parameter _id: (path) Group invitation identifier. 
     - returns: Observable<Void>
     */
    open class func leaveFromGroup(_id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            leaveFromGroup(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Leave from a group
     - POST /groups/{id}/leave
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group invitation identifier. 
     - returns: RequestBuilder<Void> 
     */
    open class func leaveFromGroupWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}/leave"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Report a group
     
     - parameter _id: (path) Group identifier. 
     - parameter postGroupReportBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reportGroup(_id: Int64, postGroupReportBody: PostGroupReportBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        reportGroupWithRequestBuilder(_id: _id, postGroupReportBody: postGroupReportBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Report a group
     
     - parameter _id: (path) Group identifier. 
     - parameter postGroupReportBody: (body)  
     - returns: Observable<Void>
     */
    open class func reportGroup(_id: Int64, postGroupReportBody: PostGroupReportBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            reportGroup(_id: _id, postGroupReportBody: postGroupReportBody) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Report a group
     - POST /groups/{id}/reports
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group identifier. 
     - parameter postGroupReportBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func reportGroupWithRequestBuilder(_id: Int64, postGroupReportBody: PostGroupReportBody) -> RequestBuilder<Void> {
        var path = "/groups/{id}/reports"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postGroupReportBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Show a group
     
     - parameter _id: (path) Group identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func showGroup(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        showGroupWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Show a group
     
     - parameter _id: (path) Group identifier. 
     - returns: Observable<Void>
     */
    open class func showGroup(_id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            showGroup(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Show a group
     - DELETE /groups/{id}/hides
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group identifier. 
     - returns: RequestBuilder<Void> 
     */
    open class func showGroupWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/groups/{id}/hides"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a group
     
     - parameter _id: (path) Group identifier. 
     - parameter putGroupBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateGroup(_id: Int64, putGroupBody: PutGroupBody, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateGroupWithRequestBuilder(_id: _id, putGroupBody: putGroupBody).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Update a group
     
     - parameter _id: (path) Group identifier. 
     - parameter putGroupBody: (body)  
     - returns: Observable<Void>
     */
    open class func updateGroup(_id: Int64, putGroupBody: PutGroupBody) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            updateGroup(_id: _id, putGroupBody: putGroupBody) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Update a group
     - PUT /groups/{id}
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group identifier. 
     - parameter putGroupBody: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateGroupWithRequestBuilder(_id: Int64, putGroupBody: PutGroupBody) -> RequestBuilder<Void> {
        var path = "/groups/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: putGroupBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
