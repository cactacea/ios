//
// InvitationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire
import RxSwift



open class InvitationsAPI {
    /**
     Accept a invitation
     
     - parameter _id: (path) Group invitation identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func acceptGroupInvitation(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        acceptGroupInvitationWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Accept a invitation
     
     - parameter _id: (path) Group invitation identifier. 
     - returns: Observable<Void>
     */
    open class func acceptGroupInvitation(_id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            acceptGroupInvitation(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Accept a invitation
     - POST /invitations/{id}/accept
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group invitation identifier. 
     - returns: RequestBuilder<Void> 
     */
    open class func acceptGroupInvitationWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/invitations/{id}/accept"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a invitation to a account
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroupInvitationToAccount(accountId: Int64, groupId: Int64, completion: @escaping ((_ data: InvitationCreated?,_ error: Error?) -> Void)) {
        createGroupInvitationToAccountWithRequestBuilder(accountId: accountId, groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Create a invitation to a account
     
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - returns: Observable<InvitationCreated>
     */
    open class func createGroupInvitationToAccount(accountId: Int64, groupId: Int64) -> Observable<InvitationCreated> {
        return Observable.create { observer -> Disposable in
            createGroupInvitationToAccount(accountId: accountId, groupId: groupId) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Create a invitation to a account
     - POST /accounts/{account_id}/groups/{group_id}/invitations
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter accountId: (path) Account Identifier. 
     - parameter groupId: (path) Group Identifier. 
     - returns: RequestBuilder<InvitationCreated> 
     */
    open class func createGroupInvitationToAccountWithRequestBuilder(accountId: Int64, groupId: Int64) -> RequestBuilder<InvitationCreated> {
        var path = "/accounts/{account_id}/groups/{group_id}/invitations"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{group_id}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InvitationCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Post a invitation to some accounts
     
     - parameter _id: (path) Group Identifier. 
     - parameter postInvitationAccountsBody: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroupInvitationToAccounts(_id: Int64, postInvitationAccountsBody: PostInvitationAccountsBody, completion: @escaping ((_ data: InvitationCreated?,_ error: Error?) -> Void)) {
        createGroupInvitationToAccountsWithRequestBuilder(_id: _id, postInvitationAccountsBody: postInvitationAccountsBody).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Post a invitation to some accounts
     
     - parameter _id: (path) Group Identifier. 
     - parameter postInvitationAccountsBody: (body)  
     - returns: Observable<InvitationCreated>
     */
    open class func createGroupInvitationToAccounts(_id: Int64, postInvitationAccountsBody: PostInvitationAccountsBody) -> Observable<InvitationCreated> {
        return Observable.create { observer -> Disposable in
            createGroupInvitationToAccounts(_id: _id, postInvitationAccountsBody: postInvitationAccountsBody) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Post a invitation to some accounts
     - POST /groups/{id}/invitations
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group Identifier. 
     - parameter postInvitationAccountsBody: (body)  
     - returns: RequestBuilder<InvitationCreated> 
     */
    open class func createGroupInvitationToAccountsWithRequestBuilder(_id: Int64, postInvitationAccountsBody: PostInvitationAccountsBody) -> RequestBuilder<InvitationCreated> {
        var path = "/groups/{id}/invitations"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: postInvitationAccountsBody)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<InvitationCreated>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get invitations list session account received
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of group invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func findSessionGroupInvitations(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil, completion: @escaping ((_ data: [GroupInvitation]?,_ error: Error?) -> Void)) {
        findSessionGroupInvitationsWithRequestBuilder(since: since, offset: offset, count: count).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get invitations list session account received
     
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of group invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: Observable<[GroupInvitation]>
     */
    open class func findSessionGroupInvitations(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> Observable<[GroupInvitation]> {
        return Observable.create { observer -> Disposable in
            findSessionGroupInvitations(since: since, offset: offset, count: count) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Get invitations list session account received
     - GET /session/invitations
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter since: (query) Filters invitations which started on since or later. (optional)
     - parameter offset: (query) The offset of group invitations. By default the value is 0. (optional)
     - parameter count: (query) Maximum number of invitations returned on one result page. By default the value is 20 entries. The page size can never be larger than 50. (optional)
     - returns: RequestBuilder<[GroupInvitation]> 
     */
    open class func findSessionGroupInvitationsWithRequestBuilder(since: Int64? = nil, offset: Int64? = nil, count: Int64? = nil) -> RequestBuilder<[GroupInvitation]> {
        let path = "/session/invitations"
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "since": since, 
            "offset": offset, 
            "count": count
        ])

        let requestBuilder: RequestBuilder<[GroupInvitation]>.Type = CactaceaAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Reject a invitation
     
     - parameter _id: (path) Group invitation identifier. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rejectGroupInvitation(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        rejectGroupInvitationWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Reject a invitation
     
     - parameter _id: (path) Group invitation identifier. 
     - returns: Observable<Void>
     */
    open class func rejectGroupInvitation(_id: Int64) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            rejectGroupInvitation(_id: _id) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Reject a invitation
     - POST /invitations/{id}/reject
     - API Key:
       - type: apiKey X-API-KEY 
       - name: api_key
     - OAuth:
       - type: oauth2
       - name: cactacea_auth
     - parameter _id: (path) Group invitation identifier. 
     - returns: RequestBuilder<Void> 
     */
    open class func rejectGroupInvitationWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/invitations/{id}/reject"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = CactaceaAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = CactaceaAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
